{# -- TemplateVersion:002 MinVersion:8510 MaxVersion:* TargetType:SqlServer ModelType:* TemplateType:Python Script                                           -- #}
{# --                                                                                                                                                       -- #}
{# --    Â© Wherescape Ltd 2020. Wherescape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template         -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : AzureSQL                                                                                                                         -- #}
{# -- Template Name      : wsl_sqlserver_pyscript_export                                                                                                        -- #}
{# -- Red Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Python script specifically                                                                               -- #}
{# --                      specifically designed for all RED exports                                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# --                                                                                                                                                       -- #}
#=============================================================================={%- br %}
# DBMS Name        :    AzureSQL {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.5.1.0{%- br %}
# Description      :    Export {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#--{%br%}

import pandas as pd{%br%}
import os{%br%}
import sys{%br%}
import pyodbc{%br%}
import csv{%br%}
import logging{%br%}
import traceback{%br%}
import gzip{%br%}
import shutil{%br%}
import subprocess{%br%}
import warnings{%br%}
import json{%br%}


path_to_WslPythonCommon = r"$WSL_SCRIPT_WslPythonCommon_CODE$"

import WslPythonCommon{%br%}

if sys.platform == 'win32':{%br%}
    WslPythonCommon.HideWindow(){%br%}


#--============================================================================{%br%}
#-- Init Logger{%br%}
#--============================================================================{%br%}
debugModeExt = WslPythonCommon.GetExtendedProperty("AZ_DEBUG_MODE", str(os.environ.get('WSL_EXP_TABLE',''))).upper().strip()
{% include "wsl_template_pyscript_utility" %}
{%br%}

# ========================================================
# = Create Export Properties Object For Source Connection
# ========================================================

exportTableProperties = {}

exportTableProperties['exportFolderPath'] = r"""{{ table.exportInfo.file.path }} """.strip(){%- br %}
exportTableProperties['exportFileName'] = '{{ table.exportInfo.file.name }}'{%- br %}
exportTableProperties['exportFilePath'] = os.path.join(exportTableProperties['exportFolderPath'], exportTableProperties['exportFileName']){%- br %}
exportTableProperties['exportFileFieldDelimiter'] = "{{ table.exportInfo.file.fieldDelimiter }}"{%- br %}
exportTableProperties['exportFileFieldEnclosure'] = '{{ table.exportInfo.file.fieldEnclosure.Replace("'","''") }}'{%- br %}
exportTableProperties['auditLog'] = str(os.environ.get('WSL_EXP_TABLE','')) + "_" + str(os.environ.get('WSL_SEQUENCE','')) + ".txt"
exportTableProperties['WSL_WORKDIR'] = str(os.environ.get('WSL_WORKDIR',''))


write_audit("=================== EXPORT OPTIONS ==================="){%br%}
write_audit("Specified Export Table:        " + str(os.environ.get('WSL_EXP_TABLE',''))){%br%}
write_audit("Specified Work Dir:          " + str(os.environ.get('WSL_WORKDIR',''))){%br%}
write_audit("Specified Sequence:          " + str(os.environ.get('WSL_SEQUENCE',''))){%br%}
write_audit("Specified Metadata ODBC DSN: " + str(os.environ.get('WSL_META_DSN',''))){%br%}
write_audit("Specified Metadata Username: " + str(os.environ.get('WSL_META_USER',''))){%br%}
write_audit("Specified Metadata Password: " + ('*'*len(str(os.environ.get('WSL_META_PWD',''))))){%br%}
write_audit("")

write_audit("=================== SOURCE TABLE INFO ==================="){%br%}
write_audit("Source Where:               " +  '{{ table.exportInfo.whereClause }}'){%br%}
write_audit(""){%br%}
write_audit("=================== SOURCE DB INFO ==================="){%br%}
write_audit("ODBC Source DSN:             " + str(os.environ.get('WSL_SRC_DSN',''))){%br%}
write_audit("ODBC Source Username:        " + str(os.environ.get('WSL_SRC_USER',''))){%br%}
write_audit("ODBC Source Password:        " + ('*'*len(str(os.environ.get('WSL_SRC_PWD',''))))){%br%}
write_audit("")
{%- br %}



def exportDataFromDatabase(query,dsn=str(os.environ.get('WSL_SRC_DSN','')), uid=str(os.environ.get('WSL_SRC_USER','')), pwd=str(os.environ.get('WSL_SRC_PWD',''))):
    try:
        if os.environ.get('WSL_TGT_CONSTRING','') != "":
            connection_string = os.environ.get('WSL_TGT_CONSTRING','')
        else:
            connection_string = "DSN=" + dsn
            if uid:
                connection_string += ";UID=" + uid
            if pwd:
                connection_string += ";PWD=" + pwd
        connection = pyodbc.connect(connection_string, autocommit=True)
        sq = pd.read_sql(query, con= connection)
        df = pd.DataFrame(sq)
        connection.close()

        if exportTableProperties['exportFileFieldEnclosure'] == "":
            isQuote = csv.QUOTE_NONE
        else:
            isQuote = csv.QUOTE_ALL

        df.to_csv(exportTableProperties['exportFilePath'], index=False , quoting=isQuote, sep=exportTableProperties['exportFileFieldDelimiter'], quotechar=exportTableProperties['exportFileFieldEnclosure']){%- br %}

        if os.path.exists(exportTableProperties['exportFilePath']):
            write_audit(f"File Successfully Exported At '{str(exportTableProperties['exportFilePath'])}'"){%- br %}
            write_audit(f"Rows Exported: {str(len(df.index))}")
            write_audit("Export Successful"){%br%}
        else:
            write_error("Export Failed"){%- br %}
            write_error(traceback.format_exc()){%- br %}
            raise Exception("Export Failed"){%- br %}

    except Exception as exceptionError:{% br %}
        write_error(f"Connection error has occured: " + str(exceptionError)){%- br %}
        write_error(traceback.format_exc()){%- br %}
        raise exceptionError{%- br %}


try:

    extractSql = """
     SELECT
      {%- from table.columns as column where (column.sourceColumn is defined or column.transform | trim != "") %}
        {%- if not loop.first %}    , {% else %} {% endif %}
        {%- if column.transform | trim != "" %}
          {{- column.source }} as "{{ column.name }}"
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            {{- column.sourceTable.name }}.
          {%- endif %}
        {%- if column.sourceColumn is defined %}
            {{- column.sourceColumn.name }} {%- if (table.exportInfo.headerRow.name == 'Business names') and (column.sourceColumn is defined) %} AS "{{ column.displayName }}" {%- endif %}
        {%- endif %}
      {%- endif %}
        {%- br %}
      {%- endfrom %}
    FROM """+str(os.environ.get('WSL_EXP_FULLNAME',''))+" "+str(os.environ.get('WSL_EXP_TABLE',''))+"""
     {%- from table.exportInfo.whereClause | lines as whereLine %}
    {{ whereLine }}{% br %}
    {%- endfrom %}
"""{%- br %}
   {%- br %}
    write_audit("================= EXTRACT SQL =====================\n"){%br%}
    write_audit(extractSql)

    exportDataFromDatabase(extractSql)

    if os.path.exists(exportTableProperties['exportFilePath']):
        write_audit("File Exported")
    else:
        write_error("Export Failed"){%- br %}
        write_error(traceback.format_exc()){%- br %}
        raise Exception("Export Failed"){%- br %}


    {%-  if (table.exportInfo.triggerFile.path != "") and ( table.exportInfo.triggerFile.name != "")  %}{%- br %}

    # ========================================================
    # = Trigger File Section
    # ========================================================

    trgFileDelim = '{{ table.exportInfo.triggerFile.fieldDelimiter }}'{%- br %}
    if trgFileDelim=="":
        trgFileDelim= "|"

    trgFilePath = r'{{ table.exportInfo.triggerFile.path }} '.replace("\ ","").replace(" ",""){%- br %}
    if trgFilePath=="":
        trgFilePath= os.environ.get('WSL_WORKDIR','')

    trgFileName = '{{ table.exportInfo.triggerFile.name }}'{%- br %}
    if trgFileName=="":
        trgFileName= str(os.environ.get('WSL_EXP_NAME',''))+"_"+str(os.environ.get('WSL_SEQUENCE',''))+".trg"

    trgFile = os.path.join(trgFilePath,trgFileName){% br %}

    mExpOptions = '{{ table.exportInfo.options.Replace("'","'''") }}'{%- br %}
    trgSelectStmt = """
    SELECT {%- br %}
    {%-  if (table.exportInfo.triggerParameter1 == "Row Count")%}
      count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter1 != "" ) %}
      {{ table.exportInfo.triggerParameter1 }}{%- br %}
    {%- endif %}
    {%-  if (table.exportInfo.triggerParameter2 == "Row Count")%}
    , count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter2 != "" ) %}
    , {{ table.exportInfo.triggerParameter2 }}{%- br %}
    {%- endif %}
    {%-  if (table.exportInfo.triggerParameter3 == "Row Count")%}
    , count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter3 != "" ) %}
    , {{ table.exportInfo.triggerParameter3 }}{%- br %}
    {%- endif %}
    FROM """+str(os.environ.get('WSL_EXP_FULLNAME',''))+" "+str(os.environ.get('WSL_EXP_TABLE','')){%- br %}
{%- br %}

    try:
        if os.environ.get('WSL_TGT_CONSTRING','') != "":
            connection_string = os.environ.get('WSL_TGT_CONSTRING','')
        else:
            dsn=str(os.environ.get('WSL_SRC_DSN',''))
            uid=str(os.environ.get('WSL_SRC_USER',''))
            pwd=str(os.environ.get('WSL_SRC_PWD',''))

            connection_string = "DSN=" + dsn
            if uid:
                connection_string += ";UID=" + uid
            if pwd:
                connection_string += ";PWD=" + pwd
        connection = pyodbc.connect(connection_string, autocommit=True)

    except Exception as exceptionError:
        write_error("Connection error has occurred: : " + repr( exceptionError)){%- br %}
        write_error(traceback.format_exc()){%- br %}
        raise exceptionError{%- br %}

    try:
        sq = pd.read_sql(trgSelectStmt, con= connection)
        df = pd.DataFrame(sq)
        connection.close()
        df.to_csv(trgFile, index=False, header=False ,sep=trgFileDelim){%- br %}

    except Exception as exceptionError: {% br %}
        write_error("Connection error has occurred: : " + repr(exceptionError)){%- br %}
        write_error(traceback.format_exc()){%- br %}
        raise exceptionError{%- br %}

    write_audit("Trigger File:    " + trgFileName)

    if os.path.exists(trgFile) :
        write_audit("Trigger File "+trgFile+" created"){%- br %}
        write_audit("Trigger Successful"){%br%}
    {%- endif %}

    {%  if (table.exportInfo.compressAfterExport  == true) %}{%- br %}
    # ========================================================
    # = File Compression/Archive
    # ========================================================

    {%- set compressUtility = table.exportInfo.compressUtility.name -%}

    {%  if compressUtility == "" %}{%- br %}
    # -- Gzip Compression For File --------------------------------------------
    exportTableProperties['exportFilePathCompressed'] = os.path.splitext(exportTableProperties['exportFilePath'])[0] + ".gz"
    with open(exportTableProperties['exportFilePath'], 'rb') as f_in:
        with gzip.open(exportTableProperties['exportFilePathCompressed'], 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)

    # Check if file compressed successfully and delete old file
    if os.path.exists(exportTableProperties['exportFilePathCompressed']):
        write_audit(f"File Compressed Successfully '{str(exportTableProperties['exportFilePathCompressed'])}'"){%- br %}
        write_audit("Compression Successful"){%br%}
        os.remove(exportTableProperties['exportFilePath'])
    else:
        write_error("Compression Failed"){%- br %}
        write_error(traceback.format_exc()){%- br %}
        raise Exception("Compression Failed"){%- br %}

    {%  else  %}{%- br %}
    # -- Custom Utility Compression For File --------------------------------------------

    utilityPath = r"{{table.exportInfo.compressUtility.path}} "{%- br %}
    utilityPath = utilityPath.strip(){%- br %}
    utilityName = '{{table.exportInfo.compressUtility.name}}'{%- br %}
    utilityParameters = '{{table.exportInfo.compressParameters}}'{%- br %}

    commandLinePath = os.path.join(utilityPath, utilityName){%- br %}
    utilityParameters = utilityParameters.replace('$EXPFILE$', exportTableProperties['exportFilePath']){%- br %}

    compressionCMD = f"{commandLinePath} {utilityParameters}"{%- br %}
    outputCMD = subprocess.check_output(compressionCMD, universal_newlines=True){%- br %}

    write_audit(outputCMD){%- br %}
    write_audit("File Compressed Using Command: " + compressionCMD){%- br %}
    {%- endif %}{%- br %}

    {%- endif %}{%- br %}
except Exception as e: {%- br %}
    write_error("Export Script Failed:" + str(e))
    write_error(traceback.format_exc())
    exitCode = 2
    exitMessage = 'Script run failed'
{%- br %}
else: {%- br %}
    exitCode = 0
    exitMessage = 'Script ran successfully'
{%- br %}
finally: {%- br %}
    exit_script(exitCode, exitMessage)
{%- br %}
