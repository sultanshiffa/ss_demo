{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:SqlServer ModelType:* TemplateType:Procedure                                               -- #}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}
{# --    Â© WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : AzureSQL                                                                                                                         -- #}
{# -- Template Name      : wsl_sqlserver_proc_perm                                                                                                          -- #}
{# -- Template Version   : 8.4.2.0                                                                                                                          -- #}
{# -- Description        : This template creates a SQL Server procedure                                                                                     -- #}
{# --                      specifically designed for RED non-history tables                                                                                 -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- PC 31/03/2020     Initial version                                                                                                                     -- #}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}
{% import "wsl_sqlserver_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
--=============================================================================={%br%}
-- DBMS Name        :    {{table.dbType.name}}{%br%}
-- Procedure Name   :    {{settings.procedureName}}{%br%}
-- Template         :    {{settings.template.name}}{%br%}
-- Template Version :    8.4.2.0{%br%}
-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
-- Generated by     :    {{env.productVersion}}{%br%}
-- Generated for    :    {{env.licensedTo}}{%br%}
-- Generated on     :    {{env.currentTimestamp}}{%br%}
-- Author           :    {{env.userName}}{%br%}
--=============================================================================={%br%}
-- Notes / History{%br%}
--{%br%}
  {#- Set things up #}
  {{- addProcedureHeader(false, false)}}
  DECLARE @v_row_count        INTEGER       -- General row count
  ,       @v_status           INTEGER       -- General status field
  ,       @v_getkey_status    INTEGER       -- GetKey procedure status
  ,       @v_current_date     DATETIME      -- Used to set date to midnight
  ,       @v_count            INTEGER       -- General counter
  ,       @v_change_count     INTEGER       -- Used for history start/end dates
  ,       @v_merge_count      INTEGER       -- no of records merged
{%- if settings.processByBatch %}
{%-   from table.columns as col where col.name == settings.batchProcessingField %}
{%br%}  ,       @v_batch_start      {{col.baseDataType | upper }}  -- Used for batch processing start{%br%}
{%-   endfrom %}
{%- endif -%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
{%br%}  ,       @v_delete_count     INTEGER       -- no of records deleted
{%- endif %}
{#--------------------------------------------------------#}
{#- Handle parameters - declare variables                -#}
{#--------------------------------------------------------#}
{%- for par in settings.parameters %}
{%br%}  ,       @v_{{par}} VARCHAR(4000)
{%- endfor %}
{#--------------------------------------------------------#}
{#- Handle parameters - get values                       -#}
{#--------------------------------------------------------#}
{%- for par in settings.parameters %}
{%-   if loop.first %}
{%br%}{%br%}  -- Set Parameter Variables
{%br%}  SET    @v_step             = {% counter %}00
{%-   endif %}
{%br%}  SET    @v_{{par}} = [METABASE].WsParameterReadF('{{par}}')
{%- endfor %}
{#--------------------------------------------------------#}
{#- Handle batch processing cursor definition            -#}
{#--------------------------------------------------------#}
{%- if settings.processByBatch %}
{%br%}{%br%}
  --============================================================================
  -- Cursor for Batch processing
  --============================================================================
  DECLARE c_Batch CURSOR LOCAL FAST_FORWARD READ_ONLY
  FOR
  SELECT DISTINCT {{settings.batchProcessingField}} batch_start
{%- if settings.sourceJoinDetails.join | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.join}}
{%- endif %}
{%- if settings.sourceJoinDetails.where | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.where | trim }}
{%- endif %}
{%- if settings.sourceJoinDetails.groupBy | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.groupBy | trim }}
{%- endif %}
{%br%}  ORDER BY batch_start
{%- endif %}
{%br%}{%br%}
  --============================================================================
  -- Main
  --============================================================================
  BEGIN TRY

  SET    @v_step             = {% counter %}00{%br%}
{%- if settings.merge %}
  SET    @v_merge_count      = 0{%br%}
{% br %}{% endif %}
{%- if settings.insert %}
  SET    @v_insert_count = 0{%br%}
{% br %}{% endif %}
{%- if settings.update %}
  SET    @v_update_count = 0{%br%}
{% br %}{% endif %}
  SET    @v_current_datetime = GETDATE()
  SET    @v_current_date     = CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(), 112), 112)
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
{%br%}  SET    @v_delete_count     = 0{%br%}
{%- endif %}
{# -- ----------------------------------------------------- #}
{# -- Handle Delete before insert options                -- #}
{# -- ----------------------------------------------------- #}
{%- if settings.deleteBeforeInsert -%}
{%-   if     settings.deleteBeforeInsertTruncate -%}
{%br%}
  --============================================================================
  -- Truncate the table
  --============================================================================
  SET    @v_step             = {% counter %}00{%br%}
  SET    @v_sql              = N'TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]'
  EXEC   @v_return_status    = sp_executesql @v_sql{%br%}
{%-   elseif settings.deleteWhereClause | trim != "" %}
{%br%}
  --============================================================================
  -- Delete any records that we will be replacing
  --============================================================================
  SELECT @v_step             = {% counter %}00
{%-     if settings.deleteBeforeInsertMultiPass -%}
{%br%}
  ,      @p_status           = 1

  WHILE  @p_status           > 0
  BEGIN
    BEGIN TRANSACTION

    DELETE TOP(50000)
{%-     else -%}
{%br%}{%br%}  BEGIN TRANSACTION
    DELETE
{%-     endif -%}
{%br%}    FROM   [TABLEOWNER].[{{table.name}}]
    {{settings.deleteWhereClause}}
{%br%}
    SELECT @v_delete_count  = @v_delete_count + @@ROWCOUNT
{%-     if settings.deleteBeforeInsertMultiPass -%}
{%br%}    ,      @p_status        = @@ROWCOUNT
{%br%}    COMMIT
  END{%br%}
{%-     else -%}
{%br%}  COMMIT{%br%}
{%-     endif -%}
{%-   endif -%}
{%- endif -%}
{%br%}
{# -- ----------------------------------------------------- #}
{# -- settings.insertZeroKeyRecord not set for non-dims     #}
{# -- Also test for the presence of an artificial key       #}
{# -- ----------------------------------------------------- #}
{%-    set surrogatekey = false -%}
{%-    from table.columns as col where col.artificial -%}
{%-      set surrogatekey = true -%}
{%     endfrom -%}
{%- if settings.insertZeroKeyRecord and surrogatekey %}
{%br%}
  --============================================================================
  -- Include 0 key row for when lookup to this table is null
  --============================================================================
  SET    @v_step             = {% counter %}00{%br%}
  SET    @v_count            = 0

  SELECT @v_count            = 1
  FROM   [TABLEOWNER].[{{table.name}}]{%br%}
{%-    from table.columns as col where col.artificial %}
  WHERE  {{col.name}} = 0{%br%}{%br%}
{%-    endfrom %}
  IF @v_count = 0
  BEGIN
    SET    @v_step          = {% counter %}00{%br%}
    BEGIN TRANSACTION

{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
    -- Allow explicit value to be inserted into IDENTITY field{%br%}
    SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] ON{%br%}
{%- endif -%}
{%- endfrom %}{%br%}

    INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
{{- addSetInsertTargetColumns() }}
    )
    VALUES{%br%}
{%-    from table.columns as col %}
{%-       if     loop.first %}
    (
{%-       else -%}
{%br%}    ,
{%-       endif -%}
{%-       if     col.artificial %}
    0
{%-       elseif col.createTime %}
GETDATE()
{%-       elseif col.currentFlag %}
'Y'
{%-       elseif col.dssEndDate %}
{{settings.changeDetectionEndCurrent}}
{%-       elseif col.dssLoadDate %}
GETDATE()
{%-       elseif col.dssStartDate %}
{{settings.changeDetectionStartInitial}}
{%-       elseif col.dssVersion %}
1
{%-       elseif col.updateTime %}
GETDATE()
{%- elseif col.zeroKeyValue != "" %}
{%- if col.dataType | lower == "char" or col.dataType | lower == "character" or col.dataType | lower == "varchar" or col.dataType | lower == "nvarchar" or col.dataType | lower == "text" or col.dataType | lower == "string" -%}SUBSTRING('{{col.zeroKeyValue}}',1,{{col.dataTypeSize}})
{%- else %}{{col.zeroKeyValue}}
  {%- endif %}
{%-  elseif (col.zeroKeyValue == "") and (col.dataType | lower == "int" or col.dataType | lower == "integer" or col.dataType | lower == "numeric" or col.dataType | lower == "bigint") and not (col.artificial or col.createTime or col.currentFlag or col.dssEndDate or col.dssLoadDate or col.dssStartDate or col.dssVersion or  col.updateTime) -%}
NULL
{%- else %}
SUBSTRING('{{col.zeroKeyValue}}', 1, 64)
{%-       endif %}
{%-    endfrom %}
){%br%}
{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
    -- Restore default handling of IDENTITY field
    SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] OFF
{%- endif -%}
{%- endfrom %}{%br%}
    COMMIT
  END{%br%}
{%- endif %}
{% br %}
{% if settings.update %}
  --============================================================================
  -- Update changed rows
  --============================================================================
	SET @v_step = {% counter %}00
    BEGIN TRANSACTION
  UPDATE [TABLEOWNER].[{{table.name}}] {% if settings.updateHint | trim != "" %}WITH ( {{settings.updateHint}} ){% endif %}{% br %}
  SET     {% from table.columns as col where not ( col.artificial or col.businessKey or ( col.dss and not col.updateTime ) ) -%}
            {%- if not loop.first %}        , {% endif -%}
            {%- if col.updateTime -%}{{col.name}} = @v_current_datetime{% br %}
            {%- elseif settings.updateChangedRowsOnly %}{{col.name}} =  changes.{{col.name}}{% br %}
            {%- else  %}{{col.name}} =  {{- col.source }}{% br %}
            {%- endif %}
          {%- endfrom %}
  {%- if settings.updateChangedRowsOnly %}
  FROM
  ({% br %}
  {%- set indent = "    " -%}
  {{- indent }}SELECT
  {%- from table.columns as column where not ( column.artificial or column.dss ) %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {{- column.source }} AS {{ column.name }}{%- br -%}
  {%- endfrom %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}{{indent}}{{joinLine}}{%br%}{%- endfor%}
  {%- for whereLine in (table.sourceJoinDetails.where | lines)%}{{indent}}{{whereLine}}{%br%}{%- endfor%}
  {%- if settings.updateChangedRowsOnly %}
    EXCEPT{% br %}
  {{- indent }}SELECT
  {%- from table.columns as column where not ( column.artificial or column.dss ) %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {{- table.name}}.{{column.name }} AS {{ column.name }}{%- br -%}
  {%- endfrom %}
    FROM [TABLEOWNER].[{{table.name}}]
  ) AS changes{% br %}
  {%- from table.columns as column where column.businessKey -%}
    {% if loop.first %}  WHERE {% else %}  AND {% endif -%}
    {{- table.name }}.{{column.name}} = changes.{{column.name}}{% br %}
  {%- endfrom %}
  {%- endif %}
  {% else %}
{{- addFromClause ( indent = "  ") -}}
  {%- from table.columns as column where column.businessKey %}
    {%- if loop.first -%}
      {{- indent }}WHERE {{table.name}}.{{column.name}} = {{column.source}}
    {%- else -%}
      {{- indent }}AND {{table.name}}.{{column.name}} = {{column.source}}
    {%- endif -%}
    {%br%}
  {%- endfrom %}

  {%- endif %}
  SELECT @v_row_count = @@ROWCOUNT

  SET @v_update_count = @v_update_count + @v_row_count
  COMMIT
{% endif %}
{% br %}

{% if settings.insert %}
  --============================================================================
  -- Insert new records
  --============================================================================
	SET @v_step = {% counter %}00
    BEGIN TRANSACTION
  INSERT INTO [TABLEOWNER].[{{table.name}}] {% if settings.insertHint | trim != "" %}WITH ( {{settings.insertHint}} ){% endif %}{% br %}
  ( {% from table.columns as column where not column.artificial -%}
      {%- if not loop.first %}  , {% endif -%}
      {{- column.name }}{% br %}
    {%- endfrom %}
  ){% br %}
	{%- set indent = "  " -%}
  {{- indent }}SELECT {% if table.sourceJoinDetails.distinct %}DISTINCT {% endif -%}
  {%- from table.columns as column where not column.artificial %}
    {%- if not loop.first %}{{- indent }}     , {% endif -%}
    {%- if column.transform | trim != "" -%}
      {%- from column.transform | trim | lines as transLine -%}
        {%- if not loop.first %}{{- indent }}       {% endif -%}
        {{- transLine -}}
        {%- if not loop.last %}{% br %}{% endif -%}
      {%- endfrom %} AS {{ column.name -}}{%- br -%}
    {%- elseif not column.dss -%}
      {{- column.source }} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source != "" ? column.source : "@v_current_datetime" }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}{{indent}}{{joinLine}}{%br%}{%- endfor%}
  {%- for whereLine in (table.sourceJoinDetails.where | lines)%}{{indent}}{{whereLine}}{%br%}{%- endfor%}
  {%- if settings.insertNewRowsOnly %}
  EXCEPT{% br %}
  {{- indent }}SELECT {# space after select -#}
  {%- from table.columns as column where not column.artificial %}
    {%- if not loop.first %}{{- indent }}     , {% endif -%}
    {%- if not column.dss -%}
      {{- table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source != "" ? table.name + "." + column.name : "@v_current_datetime" }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{- table.name}}.{{column.name}} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
  FROM [TABLEOWNER].[{{table.name}}]{% br %}
  {%- endif %}
  {%- br %}
  SELECT @v_row_count = @@ROWCOUNT

  SET @v_insert_count = @v_insert_count + @v_row_count
  COMMIT
{% endif %}
{# -- ----------------------------------------------------- #}
{# -- Handle batch processing loop                       -- #}
{# -- ----------------------------------------------------- #}
{%- if settings.processByBatch %}
{%br%}
  --============================================================================
  -- Loop over batches
  --============================================================================
  OPEN  c_Batch

  FETCH NEXT
  FROM  c_Batch
  INTO  @v_batch_start

  WHILE @@FETCH_STATUS = 0
  BEGIN
    -- Write message to log

    SET  @v_msgtext = 'Processing batch : ' + COALESCE(CONVERT(VARCHAR, @v_batch_start), ' ')
{%-   set ind = "  " %}
{%- else %}
{%-   set ind = "" %}
{%- endif %}
{%br%}{%br%}

{%- if settings.merge %}
{{ind}}  --============================================================================
{{ind}}  -- Merge new records
{{ind}}  --============================================================================
{{ind}}  SET    @v_step             = {% counter %}00{%br%}


{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
{{ind}}-- Allow explicit value to be inserted into IDENTITY field{%br%}
{{ind}}  SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] ON{%br%}
{%- endif -%}
{%- endfrom %}{%br%}

{{ind}}  MERGE INTO [TABLEOWNER].[{{table.name}}] {%- if settings.mergeHint | trim != "" %} WITH ({{settings.mergeHint}}){%- endif %}{%br%}{%br%}
{{ind}}  USING ({%br%}
{#-                 -#}
{#- N E W   R O W S -#}
{#-                 -#}
  {{ind}}-- NEW ROWS{% br %}
{{ind}}  SELECT {%br%}
{{- add_select_outerquery(indent = ind)}}
{{ind}}  FROM    (  {%br%}
{{- addNewRowSelect ( indent = "    " + ind ) -}}
{{- addFromClause ( indent = "    " + ind ) -}}
{{- addJoinToTarget ( joinType = "LEFT OUTER", indent = "    " + ind ) -}}
{{- addMaxKeyJoin ( indent = "    " + ind ) -}}
{{- addWhereClause ( indent = "    " + ind ) -}}
{{- addBatchLoopWhereClause()}}
{%- if (table.sourceJoinDetails.where | trim != "") or (settings.batchProcessingField != "") %}{{ind}}    AND {% else %}{{ind}}    WHERE {% endif %}
{%- from table.columns as bk where bk.businessKey -%}
  {%- if not loop.first -%}{{ind}}    AND {% endif -%}
  {{- table.name}}.{{bk.name}} IS NULL{% br %}
{%- endfrom %}
{{- addGroupByClause ( indent = "    " + ind ) -}}
{#-                         -#}
{#- C H A N G E D   R O W S -#}
{#-                          #}
  {{ind}}UNION ALL{% br %}
  {{ind}}-- CHANGED ROWS{% br %}
{{- addChangedRowSelect ( indent = "    " + ind ) -}}
{{- addFromClause ( indent = "    " + ind ) -}}
{{- addJoinToTarget ( joinType = "INNER", indent = "    " + ind ) -}}
{{- addWhereClause ( indent = "    " + ind ) -}}
{{- addBatchLoopWhereClause()}}
{{- addGroupByClause ( indent = "    " + ind ) }}
{%- if settings.mergeChangedRowsOnly %}
  {{ind}}-- EXCEPT FOR EXISTING ROWS TO NOT PROCESS UNCHANGED ROWS{% br %}
  {{ind}}  EXCEPT{% br %}
  {{ind}}  {{- addMergeTargetColumnsSelect ( indent = "    " + ind ) }}
  {{ind}}  FROM [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{# --{{- addBatchLoopWhereClause()}} #}
{%- endif %}
{{ind}}  ) AS derived_table) AS src{%br%}
{{ind}}  {{addMergeJoinCondition(alias = "src")}}
{%- if table.subType == "R" -%}
  {%- from table.columns as rangeS where rangeS.rangeStart %}{% fetch rangeS.sourceColumn %}  {{ind}}AND {{table.name}}.{{rangeS.name}} = src.{{rangeS.sourceColumn.name}}{% br %}{% endfrom %}
{%- endif %}
{{ind}}  WHEN MATCHED THEN UPDATE{%br%}
{{ind}}SET{{- addMergeUpdateColumns(alias = "src", indentString = "    "+ind)}}
{{ind}}  WHEN NOT MATCHED THEN INSERT{%br%}
{{ind}}{{- addSetInsertTargetColumns(indentString = ind)}}
{{ind}}  ){%br%}
{{ind}}  VALUES{%br%}
{{ind}}  ({{- addSetInsertColumnsAzureSQL(addArtificialKey = true, alias = "src", indent = "  "+ind, addColumnName = false, ignoreDssColumns = true)}}
{{ind}}  ){%br%}
{%-   if settings.deleteRowsNotInSource -%}
{%br%}{{ind}}  WHEN NOT MATCHED BY SOURCE  {{ind}}{%-  if surrogatekey -%} AND {{getArtificialKeyCol1Name() }} <> 0 {%- endif %}
{{ind}}  THEN DELETE
{%-   endif -%}
{{ind}};{%br%}

{{ind}}  SELECT @v_row_count   = @@ROWCOUNT
{{ind}}  SET    @v_merge_count = @v_merge_count + @v_row_count
{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
{{ind}}-- Restore default handling of IDENTITY field
{{ind}}  SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] OFF
{%- endif -%}
{%- endfrom %}{%br%}
    SET    @v_msgtext     = 'Merged : ' + CONVERT(VARCHAR,COALESCE(@v_row_count, 0)) + ' rows'
{#- endif #}
{%- endif %}
{%br%}{%br%}

{%-   if settings.processByBatch %}
    -- Get the next row from the cursor

    FETCH NEXT
    FROM  c_Batch
    INTO  @v_batch_start

  END -- While loop end

  -- Close the cursor

  CLOSE      c_Batch
  DEALLOCATE c_Batch
{%-   endif %}
  --============================================================================
  -- Final settings
  --============================================================================

  SET    @v_step        = {% counter %}00{%br%}

  -- Work out the return message

{%- if settings.deleteBeforeInsert and settings.warnOnDelete -%}
{%br%}{%br%}
  IF     @v_delete_count > 0
    SET  @p_status       = -1  -- Return a warning if a delete occured
  ELSE
    SET  @p_status       = 1{%br%}
{%- else -%}
{%br%}  SET    @p_status      = 1
{%- endif -%}
{%br%}  SET    @p_return_msg  = '{{table.name}} updated. '{%br%}
    {%- if settings.insert %}    + CONVERT(varchar,@v_insert_count) + ' records added. '{% br %}{% endif %}
		{%- if settings.update %}    + CONVERT(varchar,@v_update_count) + ' records updated. '{% br %}{% endif %}
		{%- if settings.merge %}    + CONVERT(varchar,@v_merge_count) + ' records merged. '{% br %}{% endif %}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate -%}
 + CONVERT(VARCHAR, @v_delete_count) + ' records deleted.'
{%- endif %}
{%br%}{%br%}

  RETURN 0
  END TRY
  BEGIN CATCH
    SET @p_status       = -2
    SET @p_return_msg   = SUBSTRING('{{table.name}} update FAILED. Step '       +
                                    CONVERT(varchar,ISNULL(@v_step, 0))         +
                                    '. Error Num: '                             +
                                    CONVERT(varchar, ISNULL(ERROR_NUMBER(), 0)) +
                                    '. Error Msg: '                             +
                                    ERROR_MESSAGE(), 1, 1023)
  END CATCH
  IF XACT_STATE() <> 0
  BEGIN
    ROLLBACK TRANSACTION
  END
  RETURN 0
