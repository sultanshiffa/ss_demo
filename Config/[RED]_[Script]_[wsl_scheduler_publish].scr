# ScriptVersion:005 MinVersion:10400 MaxVersion:* TargetType:Common ModelType:* ScriptType:PowerShell (64-bit)
# --    (c) Wherescape Inc 2025. WhereScape Inc permits you to copy this Module solely for use with the RED software, and to modify this Module            -- #
# --    for the purposes of using that modified Module with the RED software, but does not permit copying or modification for any other purpose.           -- #
#==============================================================================
# Script Name      :    wsl_scheduler_publish.ps1
# Description      :    External Scheduler publish script for Azkaban, used when creating, modifying or deleting jobs in RED.
# Author           :    WhereScape Inc
#==============================================================================
# Notes / History
# 001 : Initial release.
# 002 : Disabled tasks fix. Interactive jobs publish exception handling fix. 
# 003 : Fix for publishing to out-of-sync Azkaban metadata. Debug logging improvements for MetadataService and Azkaban connection.      
# 004 : Added RED 10.2 Connection String support to the calls to WslMetadataServiceClient.dll. Removed mandatory requirement on meta user and pwd. 
# 005 : Fallback to script run directory when WSL_WORKDIR is not set. Cleanse API URL by removing trailing '/' before using it.
#==============================================================================

try {

$ErrorActionPreference = "Stop"
$startTime = $(Get-Date)

Import-Module Microsoft.PowerShell.Archive

function Get-MandatoryEnvironmentVariable($var) {
    $value = [System.Environment]::GetEnvironmentVariable($var)
    if ($null -eq $value) {
        throw "Required environment variable '$var' is not set"
    }
    $value
}

$WSL_BINDIR = Get-MandatoryEnvironmentVariable 'WSL_BINDIR'
$WSL_META_DSN = Get-MandatoryEnvironmentVariable 'WSL_META_DSN'
$WSL_META_DSN_ARCH = Get-MandatoryEnvironmentVariable 'WSL_META_DSN_ARCH'
$WSL_META_SERVER = Get-MandatoryEnvironmentVariable 'WSL_META_SERVER'
$WSL_META_DBPORT = Get-MandatoryEnvironmentVariable 'WSL_META_DBPORT'
$WSL_META_DB = Get-MandatoryEnvironmentVariable 'WSL_META_DB'
$WSL_META_USER = [System.Environment]::GetEnvironmentVariable('WSL_META_USER')
$WSL_META_PWD = [System.Environment]::GetEnvironmentVariable('WSL_META_PWD')
$WSL_META_SCHEMA = Get-MandatoryEnvironmentVariable 'WSL_META_SCHEMA'
$WSL_META_CON_STRING = Get-MandatoryEnvironmentVariable 'WSL_META_CON_STRING'
$WSL_WORKDIR = if ([String]::IsNullOrEmpty($ENV:WSL_WORKDIR)) { $PSScriptRoot } else { $ENV:WSL_WORKDIR }
$WSL_SCH_RESTAPI_URL = Get-MandatoryEnvironmentVariable 'WSL_SCH_RESTAPI_URL'
$WSL_SCH_RESTAPI_USER = Get-MandatoryEnvironmentVariable 'WSL_SCH_RESTAPI_USER'
$WSL_SCH_RESTAPI_PWD = Get-MandatoryEnvironmentVariable 'WSL_SCH_RESTAPI_PWD'
$WSL_JOB_KEY = [System.Environment]::GetEnvironmentVariable('WSL_JOB_KEY')

$null = New-Module {
    function Write-WslOutput {
        Write-Output $args
        Write-WslDetail $args
    }

    function Write-WslDetail {
        $msg = $args | Out-String
        [System.Console]::Error.Write($msg)
    }

    $global:wslDebugEnabled = $false

    function Enable-WslDebug {
        $global:wslDebugEnabled = $true
    }

    function Write-WslDebug {
        if ($global:wslDebugEnabled) {
            Write-WslDetail $args
        }
    }

    function Time-Section($Name, $Expression) {
        Write-WslDetail "$Name..."
        $time = Measure-Command $Expression
        Write-WslDetail "... $Name took $($time.TotalSeconds)s."
    }
}

# Enable-WslDebug

Time-Section "Connecting to RED metadata (WslMetadataServiceClient.dll)" {
  [void] [Reflection.Assembly]::LoadFile("$WSL_BINDIR\WslMetadataServiceClient.dll")
  Write-WslDetail "Retrieving metadata for Job ID: $WSL_JOB_KEY, from RED Metadata DSN: $WSL_META_DSN"
  $metaDbType = [WslMetadataServiceClient.MetaDatabaseType]::PostgreSQL
  $metaDsnArchitecture = if ($WSL_META_DSN_ARCH -eq "64") {[WslMetadataServiceClient.Architecture]::_64bit} else {[WslMetadataServiceClient.Architecture]::_32bit}
  $script:repo = New-Object WslMetadataServiceClient.Repo($WSL_META_DSN, $metaDbType, $WSL_META_USER, $WSL_META_PWD, $WSL_META_SCHEMA, $metaDsnArchitecture, $WSL_META_CON_STRING)
  $script:Types = $repo.Types.GetChildren()
  try {
    # Test the underlying metadata serverce connection 
    Write-WslDetail "Found Job Name:", $repo.JobsById[$WSL_JOB_KEY].name
  }
  catch {
    throw $error
  }
}

$azkabanUri = $WSL_SCH_RESTAPI_URL.TrimEnd('/')
$azkabanUserPrefix = $WSL_SCH_RESTAPI_USER
$azkabanPassword = $WSL_SCH_RESTAPI_PWD

function ProjectFile {
    @"
azkaban-flow-version: 2.0
"@
}

function JobProjectName($job) {
    "wsl_job_$($job.id)"
}
function JobFlowName($job) {
    "wsl_job_$($job.id)"
}
function TaskJobName($task) {
    "$($task.actionType.name) $($task.name) ($($task.id))"
}

function CronMinuteIncrement($dailyFrequency) {
    switch ($dailyFrequency) {
        {$_ -eq $Types.DailyFrequency.OnceADay} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every12Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every8Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every6Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every4Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every3Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every2Hours} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.EveryHour} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every30Minutes} {
            "/30"
        }
        {$_ -eq $Types.DailyFrequency.Every20Minutes} {
            "/20"
        }
        {$_ -eq $Types.DailyFrequency.Every15Minutes} {
            "/15"
        }
        {$_ -eq $Types.DailyFrequency.Every12Minutes} {
            "/12"
        }
        {$_ -eq $Types.DailyFrequency.Every10Minutes} {
            "/10"
        }
        {$_ -eq $Types.DailyFrequency.Every6Minutes} {
            "/6"
        }
        {$_ -eq $Types.DailyFrequency.Every5Minutes} {
            "/5"
        }
        {$_ -eq $Types.DailyFrequency.Every4Minutes} {
            "/4"
        }
        {$_ -eq $Types.DailyFrequency.Every3Minutes} {
            "/3"
        }
        {$_ -eq $Types.DailyFrequency.Every2Minutes} {
            "/2"
        }
        {$_ -eq $Types.DailyFrequency.EveryMinute} {
            "/1"
        }
        default {
            throw "Unsupported DailyFrequency $($dailyFrequency)"
        }
    }
}

function CronHourIncrement($dailyFrequency) {
    switch ($dailyFrequency) {
        {$_ -eq $Types.DailyFrequency.OnceADay} {
            ""
        }
        {$_ -eq $Types.DailyFrequency.Every12Hours} {
            "/12"
        }
        {$_ -eq $Types.DailyFrequency.Every8Hours} {
            "/8"
        }
        {$_ -eq $Types.DailyFrequency.Every6Hours} {
            "/6"
        }
        {$_ -eq $Types.DailyFrequency.Every4Hours} {
            "/4"
        }
        {$_ -eq $Types.DailyFrequency.Every3Hours} {
            "/3"
        }
        {$_ -eq $Types.DailyFrequency.Every2Hours} {
            "/2"
        }
        {$_ -eq $Types.DailyFrequency.EveryHour} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every30Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every20Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every15Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every12Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every10Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every6Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every5Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every4Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every3Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.Every2Minutes} {
            "/1"
        }
        {$_ -eq $Types.DailyFrequency.EveryMinute} {
            "/1"
        }
        default {
            throw "Unsupported DailyFrequency $($dailyFrequency)"
        }
    }
}

function CronDayOfMonth($dayOfMonth) {
    if (([Int]$dayOfMonth -ge 1) -and ([Int]$dayOfMonth -le 31)) {
        "$($dayOfMonth)"
    } elseif ([Int]$dayOfMonth -eq 99) {
        "L"
    } else {
        throw "Unsupported DayOfMonth $($dayOfMonth)"
    }
}

function CronNearestWeekday($onNearestWeekday) {
    if ($onNearestWeekday) {
        "W"
    } else {
        ""
    }
}

function CronMonth($month) {
    switch ($month) {
        {$_ -eq $Types.Month.January} {
            "JAN"
        }
        {$_ -eq $Types.Month.February} {
            "FEB"
        }
        {$_ -eq $Types.Month.March} {
            "MAR"
        }
        {$_ -eq $Types.Month.April} {
            "APR"
        }
        {$_ -eq $Types.Month.May} {
            "MAY"
        }
        {$_ -eq $Types.Month.June} {
            "JUN"
        }
        {$_ -eq $Types.Month.July} {
            "JUL"
        }
        {$_ -eq $Types.Month.August} {
            "AUG"
        }
        {$_ -eq $Types.Month.September} {
            "SEP"
        }
        {$_ -eq $Types.Month.October} {
            "OCT"
        }
        {$_ -eq $Types.Month.November} {
            "NOV"
        }
        {$_ -eq $Types.Month.December} {
            "DEC"
        }
        default {
            throw "Unsupported Month $($month)"
        }
    }
}

function CronDayOfWeek($dayOfWeek) {
    switch ($dayOfWeek) {
        {$_ -eq $Types.DayOfWeek.Monday} {
            "MON"
        }
        {$_ -eq $Types.DayOfWeek.Tuesday} {
            "TUE"
        }
        {$_ -eq $Types.DayOfWeek.Wednesday} {
            "WED"
        }
        {$_ -eq $Types.DayOfWeek.Thursday} {
            "THU"
        }
        {$_ -eq $Types.DayOfWeek.Friday} {
            "FRI"
        }
        {$_ -eq $Types.DayOfWeek.Saturday} {
            "SAT"
        }
        {$_ -eq $Types.DayOfWeek.Sunday} {
            "SUN"
        }
        default {
            throw "Unsupported DayOfWeek $($dayOfWeek)"
        }
    }
}

function CronWeekOfMonth($weekOfMonth) {
    if (([Int]$weekOfMonth -ge 1) -and ([Int]$weekOfMonth -le 5)) {
        "#$($weekOfMonth)"
    } elseif ([Int]$weekOfMonth -eq 99) {
        "L"
    } else {
        throw "Unsupported WeekOfMonth $($weekOfMonth)"
    }
}

function CronMonths($months) {
    if ($months.IsNull()) {
        "*"
    } else {
        ($months.GetItems() | ForEach-Object { CronMonth $_ }) -join ','
    }
}

function CronDaysOfWeek($daysOfWeek) {
    ($daysOfWeek.GetItems() | ForEach-Object { CronDayOfWeek $_ }) -join ','
}

function CronDaysOfMonth($daysOfMonth) {
    ($daysOfMonth.GetItems() | ForEach-Object { CronDayOfMonth $_ }) -join ','
}

function JobCronSpec($job) {
    try {
        if ($job.onHold) {
            Write-WslDetail "Not scheduling job $($job.name): the job is On Hold"
            $null
        } else {
            switch ($job.frequencyAndTime.frequency) {
                {$_ -eq $Types.Frequency.None} {
                    Write-WslDetail "Not scheduling job $($job.name): the job frequency is None"
                    $null
                }
                {$_ -eq $Types.Frequency.Once} {
                    [String]::Concat("0"
                    ," $($job.frequencyAndTime.time.dateAndTimeOfDay.timeOfDay.minute)"
                    ," $($job.frequencyAndTime.time.dateAndTimeOfDay.timeOfDay.hour)"
                    ," $(CronDayOfMonth $job.frequencyAndTime.time.dateAndTimeOfDay.date.dayOfMonth)"
                    ," $(CronMonth $job.frequencyAndTime.time.dateAndTimeOfDay.date.month)"
                    ," ?"
                    ," $($job.frequencyAndTime.time.dateAndTimeOfDay.date.year)"
                    )
                }
                {$_ -eq $Types.Frequency.Yearly} {
                    switch ($job.frequencyAndTime.time.dayOfYear.type) {
                        {$_ -eq $Types.YearlyDayOfYearType.MonthAndDayOfMonth} {
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.timeOfDay.minute)"
                            ," $($job.frequencyAndTime.time.timeOfDay.hour)"
                            ," $(CronDayOfMonth $job.frequencyAndTime.time.dayOfYear.data.dayOfMonth)"
                            ," $(CronMonth $job.frequencyAndTime.time.dayOfYear.data.month)"
                            ," ?"
                            ," *"
                            )
                        }
                        {$_ -eq $Types.YearlyDayOfYearType.MonthAndWeekOfMonthAndDayOfWeek} {
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.timeOfDay.minute)"
                            ," $($job.frequencyAndTime.time.timeOfDay.hour)"
                            ," ?"
                            ," $(CronMonth $job.frequencyAndTime.time.dayOfYear.data.month)"
                            ," $(CronDayOfWeek $job.frequencyAndTime.time.dayOfYear.data.dayOfWeek)$(CronWeekOfMonth $job.frequencyAndTime.time.dayOfYear.data.weekOfMonth)"
                            ," *"
                            )
                        }
                        default {
                            throw "Unsupported YearlyDayOfYearType $($job.frequencyAndTime.time.dayOfYear.type)"
                        }
                    }
                }
                {$_ -eq $Types.Frequency.Monthly} {
                    switch ($job.frequencyAndTime.time.dayOfMonth.type) {
                        {$_ -eq $Types.MonthlyDayOfMonthType.DayOfMonthAndIfOnNearestWeekday} {
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.timeOfDay.minute)"
                            ," $($job.frequencyAndTime.time.timeOfDay.hour)"
                            ," $(CronDayOfMonth $job.frequencyAndTime.time.dayOfMonth.data.dayOfMonth)$(CronNearestWeekday $job.frequencyAndTime.time.dayOfMonth.data.onNearestWeekday)"
                            ," *"
                            ," ?"
                            ," *"
                            )
                        }
                        {$_ -eq $Types.MonthlyDayOfMonthType.WeekOfMonthAndDayOfWeek} {
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.timeOfDay.minute)"
                            ," $($job.frequencyAndTime.time.timeOfDay.hour)"
                            ," ?"
                            ," *"
                            ," $(CronDayOfWeek $job.frequencyAndTime.time.dayOfMonth.data.dayOfWeek)$(CronWeekOfMonth $job.frequencyAndTime.time.dayOfMonth.data.weekOfMonth)"
                            ," *"
                            )
                        }
                        default {
                            throw "Unsupported MonthlyDayOfMonthType $($job.frequencyAndTime.time.dayOfMonth.type)"
                        }
                    }
                }
                {$_ -eq $Types.Frequency.Weekly} {
                    [String]::Concat("0"
                    ," $($job.frequencyAndTime.time.timeOfDay.minute)"
                    ," $($job.frequencyAndTime.time.timeOfDay.hour)"
                    ," ?"
                    ," *"
                    ," $(CronDayOfWeek $job.frequencyAndTime.time.dayOfWeek)"
                    ," *"
                    )
                }
                {$_ -eq $Types.Frequency.Daily} {
                    
                    switch ($job.frequencyAndTime.time.dailyFrequency){
                        {$_ -eq $Types.DailyFrequency.OnceADay}{
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.firstTimeOfDay.minute)$(CronMinuteIncrement $job.frequencyAndTime.time.dailyFrequency)"
                            ," $($job.frequencyAndTime.time.firstTimeOfDay.hour)$(CronHourIncrement $job.frequencyAndTime.time.dailyFrequency)"
                            ," *"
                            ," *"
                            ," ?"
                            ," *"
                            )
                        }
                        default {
                            [String]::Concat("0"
                            ," $($job.frequencyAndTime.time.cronTimeOfDay.minute)"
                            ," $($job.frequencyAndTime.time.cronTimeOfDay.hour)"
                            ," *"
                            ," *"
                            ," ?"
                            ," *"
                            )
                        }
                    }
                }
                {$_ -eq $Types.Frequency.Advanced} {
                    switch ($job.frequencyAndTime.time.dailyFrequency){
                        {$_ -eq $Types.DailyFrequency.OnceADay}{
                            switch ($job.frequencyAndTime.time.days.type) {
                                {$_ -eq $Types.AdvancedDaysType.SelectedDaysOfWeek} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.minute)$(CronMinuteIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.hour)$(CronHourIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," ?"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," $(CronDaysOfWeek $job.frequencyAndTime.time.days.data)"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.SelectedDaysOfMonth} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.minute)$(CronMinuteIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.hour)$(CronHourIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $(CronDaysOfMonth $job.frequencyAndTime.time.days.data)"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," ?"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.NearestWeekdaysToDayOfMonth} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.minute)$(CronMinuteIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.hour)$(CronHourIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $(CronDayOfMonth $job.frequencyAndTime.time.days.data.dayOfMonth)$(CronNearestWeekday $true)"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," ?"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.WeekOfMonthAndDayOfWeek} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.minute)$(CronMinuteIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," $($job.frequencyAndTime.time.firstTimeOfDay.hour)$(CronHourIncrement $job.frequencyAndTime.time.dailyFrequency)"
                                    ," ?"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," $(CronDayOfWeek $job.frequencyAndTime.time.days.data.dayOfWeek)$(CronWeekOfMonth $job.frequencyAndTime.time.days.data.weekOfMonth)"
                                    ," *"
                                    )
                                }
        
                                default {
                                    throw "Unsupported AdvancedDaysType $($job.frequencyAndTime.time.advancedDays.type)"
                                }
                            }
                        }
                        {$_ -eq $Types.DailyFrequency.CronExpression} {
                            [String]::Concat(""
                            ,"$($job.frequencyAndTime.time.cronExpression.expression)"
                            )
                        }
                        default {
                            switch ($job.frequencyAndTime.time.days.type) {
                                {$_ -eq $Types.AdvancedDaysType.SelectedDaysOfWeek} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.minute)"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.hour)"
                                    ," ?"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," $(CronDaysOfWeek $job.frequencyAndTime.time.days.data)"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.SelectedDaysOfMonth} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.minute)"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.hour)"
                                    ," $(CronDaysOfMonth $job.frequencyAndTime.time.days.data)"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," ?"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.NearestWeekdaysToDayOfMonth} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.minute)"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.hour)"
                                    ," $(CronDayOfMonth $job.frequencyAndTime.time.days.data.dayOfMonth)$(CronNearestWeekday $true)"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," ?"
                                    ," *"
                                    )
                                }
                                {$_ -eq $Types.AdvancedDaysType.WeekOfMonthAndDayOfWeek} {
                                    [String]::Concat("0"
                                    ," $($job.frequencyAndTime.time.cronTimeOfDay.minute)"
                                    ," $($job.frequencyAndTime.time.crontTimeOfDay.hour)"
                                    ," ?"
                                    ," $(CronMonths $job.frequencyAndTime.time.months)"
                                    ," $(CronDayOfWeek $job.frequencyAndTime.time.days.data.dayOfWeek)$(CronWeekOfMonth $job.frequencyAndTime.time.days.data.weekOfMonth)"
                                    ," *"
                                    )
                                }
        
                                default {
                                    throw "Unsupported AdvancedDaysType $($job.frequencyAndTime.time.advancedDays.type)"
                                }
                            }
                        }
                    }
                    
                }
                default {
                    throw "Unsupported Frequency $($job.frequencyAndTime.frequency)"
                }
            }
        }
    } catch {
        Write-WslDetail "Error processing cron spec for job $($job.name): $_"
        $null
    }
}

function JobTaskNode($topJob, $task, $i, $seenJobs) {
        @"

$i- name: $(TaskJobName $task)
$i  dependsOn:$(
        foreach ($parent in $task.parentTasks.GetItems()) {
            @"

$i    - $(TaskJobName $parent)
"@
        }
        if (!$task.subJob.IsNull()) {
            @"

$i  type: flow
$i  nodes:$(JobTasksNodes -topJob $topJob -job $task.subJob -i "$i    " -seenJobs $seenJobs)
"@
        } elseif ($task.actionInd -ne $Types.TaskActionInd.Enabled) {
            @"

$i  type: noop
"@
        } else {
            @"

$i  type: javaprocess
$i  config:
$i    classpath: `${com.wherescape.red.classpath}
$i    java.class: com.wherescape.red.schedulerutils.Main
$i    main.args: execute-task --job-id $($topJob.id) --task-id $($task.id)
"@
        })
"@
}

function JobTasksNodes($topJob, $job, $i, $seenJobs) {
    if ($seenJobs -contains $job) {
        throw "Job cycle detected: $($seenJobs + $job | ForEach-Object {$_.name})"
    }
    foreach ($task in $job.tasks.GetItems()) {
        JobTaskNode -topJob $topJob -task $task -i $i -seenJob ($seenJobs + $job)
    }
}

function TriggerDependencies($job) {
    @"
  triggerDependencies:$(
    $i = 1
    foreach ($dep in $job.dependencies.GetItems()) {
        @"

    - name: $i. Parent job $($dep.parentJob.name)
      type: redJobDependency
      params:
        childJobKey: $($job.id)
        childJobName: $($job.name)
        parentJobKey: $($dep.parentJob.id)
        parentJobName: $($dep.parentJob.name)
        timeWindowMinutes: $($dep.firstCheckLagMinutes)
        maxWaitTimeMinutes: $($dep.waitIntervalMinutes)
        required: $(if ($dep.required.GetValue()) {'true'} else {'false'})
"@
        $i = $i + 1
    })
"@
}

function JobFlow($job) {
    @"
---
config:
  displayName: $($job.name)
  failure.emails: noreply@foo.com
  required.executor.tags: $($job.schedulerTags.GetItems() -join ',')
$(
    $cronSpec = JobCronSpec $job
    Write-WslDetail "Adding schedule '$cronSpec' to job $($job.name)..."
    if ($cronSpec) {
        @"

trigger:
  schedule:
    type: cron
    value: $cronSpec
  maxWaitMins: 2880 # one day
  executionOptions:
    concurrentOption: pipeline
    pipelineLevel: 3
    failureAction: FINISH_ALL_POSSIBLE
    flowParameters:
      flow.num.job.threads: '$($job.maxThreads)'
$(

        if ($job.dependencies.GetItems().Count -gt 0) {
            TriggerDependencies($job)
        }
)
"@
    }
)

nodes:
  - name: Start
    type: javaprocess
    config:
      classpath: `${com.wherescape.red.classpath}
      java.class: com.wherescape.red.schedulerutils.Main
      main.args: start-job-execution --job-id $($job.id)

  - name: Tasks
    dependsOn:
      - Start$(
    if ($job.tasks.GetItems().Count -gt 0) {
        @"

    type: flow
    nodes:$(JobTasksNodes -topJob $job -job $job -i "      " -seenJobs @())

"@
    } else {
        @"

    type: noop
"@
    })
  - name: Finish
    dependsOn:
      - Tasks
    type: javaprocess
    config:
      classpath: `${com.wherescape.red.classpath}
      java.class: com.wherescape.red.schedulerutils.Main
      main.args: finish-job-execution --job-id $($job.id)
"@
}

function Log-Into-Azkaban($jobOwnerName)
{
    $azkabanUserName = "$azkabanUserPrefix-$jobOwnerName"
    if ($script:loggedInUser -ne $jobOwnerName) {
        Time-Section "Logging in to Azkaban '$azkabanUri' as '$azkabanUserName'" {
            $loginBody = @{
                action = 'login'
                username = $azkabanUserName
                password = $azkabanPassword
            }
            $loginResponse = Invoke-WebRequest -Uri $azkabanUri -UseBasicParsing -Method 'POST' -Body $loginBody
            $loginResult = $loginResponse | ConvertFrom-Json
            $script:sessionId = $loginResult.'session.id'
            $script:loggedInUser = $azkabanUserName
            $azkabanVersion = $loginResult.'integration.version'
            Write-WslDetail "Logged into Azkaban version $azkabanVersion"
            Write-WslDebug "session id = $sessionId"
        }
    }
}

function Invoke-MultipartFormDataUpload
{
    [CmdletBinding()]
    PARAM
    (
        [string][parameter(Mandatory = $true)][ValidateNotNullOrEmpty()]$InFile,
        [string]$ContentType,
        [Uri][parameter(Mandatory = $true)][ValidateNotNullOrEmpty()]$Uri,
        $Body,
        [System.Management.Automation.PSCredential]$Credential
    )
    BEGIN
    {
        if (-not (Test-Path $InFile))
        {
            $errorMessage = ("File {0} missing or unable to read." -f $InFile)
            $exception =  New-Object System.Exception $errorMessage
            $errorRecord = New-Object System.Management.Automation.ErrorRecord $exception, 'MultipartFormDataUpload', ([System.Management.Automation.ErrorCategory]::InvalidArgument), $InFile
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        }

        if (-not $ContentType)
        {
            Add-Type -AssemblyName System.Web

            $mimeType = [System.Web.MimeMapping]::GetMimeMapping($InFile)
            
            if ($mimeType)
            {
                $ContentType = $mimeType
            }
            else
            {
                $ContentType = "application/octet-stream"
            }
        }
    }
    PROCESS
    {
        Add-Type -AssemblyName System.Net.Http

        $httpClientHandler = New-Object System.Net.Http.HttpClientHandler

        if ($Credential)
        {
            $networkCredential = New-Object System.Net.NetworkCredential @($Credential.UserName, $Credential.Password)
            $httpClientHandler.Credentials = $networkCredential
        }

        $httpClient = New-Object System.Net.Http.Httpclient $httpClientHandler

        $packageFileStream = New-Object System.IO.FileStream @($InFile, [System.IO.FileMode]::Open)
        
        $contentDispositionHeaderValue = New-Object System.Net.Http.Headers.ContentDispositionHeaderValue "form-data"
        $contentDispositionHeaderValue.Name = "file"
        $contentDispositionHeaderValue.FileName = (Split-Path $InFile -leaf)

        $streamContent = New-Object System.Net.Http.StreamContent $packageFileStream
        $streamContent.Headers.ContentDisposition = $contentDispositionHeaderValue
        $streamContent.Headers.ContentType = New-Object System.Net.Http.Headers.MediaTypeHeaderValue $ContentType
        
        $content = New-Object System.Net.Http.MultipartFormDataContent
        $content.Add($streamContent)

        foreach ($key in $Body.Keys) {
            $contentDispositionHeaderValue = New-Object System.Net.Http.Headers.ContentDispositionHeaderValue "form-data"
            $contentDispositionHeaderValue.Name = $key
    
            $stringContent = New-Object System.Net.Http.StringContent $Body[$key]
            $stringContent.Headers.ContentDisposition = $contentDispositionHeaderValue
            $content.Add($stringContent)
        }

        try
        {
            $response = $httpClient.PostAsync($Uri, $content).Result

            if (!$response.IsSuccessStatusCode)
            {
                $responseBody = $response.Content.ReadAsStringAsync().Result
                $errorMessage = "Status code {0}. Reason {1}. Server reported the following message: {2}." -f $response.StatusCode, $response.ReasonPhrase, $responseBody

                throw [System.Net.Http.HttpRequestException] $errorMessage
            }

            return $response.Content.ReadAsStringAsync().Result
        }
        catch [Exception]
        {
            $PSCmdlet.ThrowTerminatingError($_)
        }
        finally
        {
            if($null -ne $httpClient)
            {
                $httpClient.Dispose()
            }

            if($null -ne $response)
            {
                $response.Dispose()
            }
        }
    }
    END { }
}

Add-Type -AssemblyName System.Net.Http

function Create-Project($Name) {
    $body = @{
        'session.id' = $sessionId
        action = 'create'
        name = $Name
        description = 'Generated by RED'
    }
    Time-Section "Creating project" {
        $createResponse = Invoke-WebRequest -Uri "$azkabanUri/manager?action=create" -UseBasicParsing -Method 'POST' -Body $body -MaximumRedirection 0
        Write-WslDebug "Finished create project: $createResponse"
    }
}

function Send-ProjectFile($Name, $ZipFile) {
    $form = @{
        'session.id' = $sessionId
        ajax = 'upload'
        project = $Name
        #file = Get-Item -Path $ZipFile
    }

    Write-WslDebug "Making upload request..."
    $uploadResponse = Invoke-MultipartFormDataUpload -Uri "$azkabanUri/manager?ajax=upload" -InFile $ZipFile -ContentType 'application/zip' -Body $form
    #$uploadResult = Invoke-WebRequest -Uri "$azkabanUri/manager?ajax=upload" -UseBasicParsing -Method 'POST' -Form $MultipartContent # Powershell 6 and later
    Write-WslDebug "Finished upload request:"
    Write-WslDebug $uploadResponse
    $uploadResult = $uploadResponse | ConvertFrom-Json
    $uploadResult.projectId
}

$jobs = , $repo.jobsById[$WSL_JOB_KEY]

Time-Section "Checking for projects that need to be deleted" {
    foreach ($job in $jobs) {
        if ($job.modification -eq $Types.ModificationType.Deleted) {
            $project = JobProjectName($job)
            Write-WslDetail "Deleting project '$($project)'"
            Log-Into-Azkaban($job.owner.name)
            $deleteResponse = Invoke-WebRequest -Uri "$azkabanUri/manager?delete=true&session.id=$sessionId&project=$($project)" -UseBasicParsing -Method 'GET'
            # No useful response is returned for deleting a project
            [void] $deleteResponse
        }
    }
}

Time-Section "Removing old temp project directories" {
    $anyRemoved = $false
    foreach ($job in $jobs) {
        $project = JobProjectName($job)
        $projectFolder = "$WSL_WORKDIR\$project"
        if (Test-Path $projectFolder) {
            Remove-Item -Path $projectFolder -Recurse
            $anyRemoved = $true
        }
    }
    if ($anyRemoved) {
        Start-Sleep -Seconds 1 # sometimes the following New-Item fails if we don't wait?
    }
}

foreach ($job in $jobs) {
    if (($job.modification -eq $Types.ModificationType.Inserted) -or ($job.modification -eq $Types.ModificationType.Updated)) {
        $project = JobProjectName($job)

        Write-WslDetail "Creating project '$project'"
        $projectFolder = "$WSL_WORKDIR\$project"
        New-Item $projectFolder -ItemType 'Directory' | Out-Null
        Write-Output $(ProjectFile) > "$projectFolder\red.project"
        # The properties file needs to be UTF-8 with no BOM: https://stackoverflow.com/a/5596984 

        Time-Section "Writing flow file" {
            $flow = JobFlow($job)
            Write-Output $flow > "$projectFolder\$(JobFlowName($job)).flow"
        }

        $projectZipFile = "$WSL_WORKDIR\$project.zip"
        Time-Section "Creating project zip file" {
            Compress-Archive -CompressionLevel 'Fastest' -Path $projectFolder\* -DestinationPath $projectZipFile -Force
        }

        Log-Into-Azkaban($job.owner.name)

        # Project creation usually only neccesary for new jobs, but is atempted for modifications too for out of sync repo's
        Create-Project -Name $project

        $projectId = $null
        Time-Section "Uploading project zip file" {
            $projectId = Send-ProjectFile -Name $project -ZipFile $projectZipFile
            Write-WslDetail "Uploaded project with id $projectId"
        }

        Remove-Item -Path $projectFolder -Recurse
    }
}

Time-Section "Starting interactive jobs" {
    foreach ($job in $jobs) {
        if (($job.modification -ne $Types.ModificationType.Deleted) -and ($job.frequencyAndTime.frequency -eq $Types.Frequency.None) -and (-not [Bool]$job.onHold)) {
            Write-WslDetail "Starting $($job.name)"
            $executeResponse = Invoke-WebRequest -Uri "$azkabanUri/executor?ajax=executeFlow&session.id=$sessionId&project=$(JobProjectName($job))&flow=$(JobFlowName($job))&failureAction=finishPossible&flowOverride[flow.num.job.threads]=$($job.maxThreads)" -UseBasicParsing -Method 'GET'
            $executeResult = $executeResponse | ConvertFrom-Json
            $errorMessage = $executeResult.'error'
            if ($errorMessage) {
                throw $errorMessage
            }
        }
    }
}

$elapsedTime = New-TimeSpan -Start $startTime

Write-Output 1
Write-Output "Published $($jobs.Count) jobs in $($elapsedTime.TotalSeconds)s"

} catch {
    if ($_.Exception.Message -Match "will never fire") {
        Write-Output -1
        Write-Output "Trigger for job will never fire"
    } else {
        Write-Output -2
        Write-Output "Exception halted publish job"
        throw $_.Exception
    }
}
