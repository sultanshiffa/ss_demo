{# -- TemplateVersion:004 MinVersion:8510 MaxVersion:* TargetType:SqlServer ModelType:STAR,ODS,NORMAL TemplateType:Utility                                   -- #}
{# --                                                                                                                                                       -- #}
{# --    Â© WhereScape Inc 2024-2019. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template     -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : AzureSQL                                                                                                                         -- #}
{# -- Template Name      : wsl_sqlserver_utility_dml                                                                                                            -- #}
{# -- Template Version   : 8.4.1.0                                                                                                                          -- #}
{# -- Description        : Generic macros that can be used to define specific templates for SQL Server procedures                                           -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- BC 14/12/2017     Fixed to use the correct sourceJoinDetails associated with the Update or Custom procedure being built.                              -- #}
{# -- BC 17/07/2018     Added PROCEDUREOWNER markup to the procedure name in the CREATE PROCEDURE statement.                                                -- #}
{# -- CR 11/07/2018     Corrects addSetInsertTargetColumns to allow the template to work with fact tables utilising an artificial key                       -- #}
{# -- BC 18/10/2018     Changed the PROCEDUREOWNER markup in the CREATE PROCEDURE statement to use the SCHEMA markup instead.                               -- #}
{# -- BC 19/10/2018     Moved the generation of the insert column list open parenthesis back inside addSetInsertTargetColumns.                              -- #}
{# -- HM 13/02/2019     Increase return message size from 256 to 1024 characters.                                                                           -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}

{# -- This macro adds the source columns and dss columns -- #}
{% macro addSetInsertColumns(addArtificialKey = false, alias = "", ignoreDssColumns = false, addColumnName = true, indentString = "       ") %}
  {%- from table.columns as column where (not column.artificial) or (column.artificial and addArtificialKey) or (column.artificial and (not addArtificialKey) and column.transform | trim != "")%}
    {%- if not loop.first %}{{indentString}}, {% else %} {% endif %}
    {%- if column.transform | trim != "" %}
      {%- if alias != "" -%}
        {{alias}}.{{column.name}}
      {%- else -%}
        {%- for transLine in (column.transform | trim | lines) %}
          {%- if not loop.first %}              {% endif %}{{transLine}}{%- if not loop.last %}{%br%}{% endif %}
        {%- endfor %}
      {%- endif %}
    {%- elseif (column.updateTime or column.createTime) and not ignoreDssColumns -%}
      {%- if column.createTime -%}
        @v_current_datetime
      {%- else -%}
        @v_current_datetime
      {%- endif%}
    {%- elseif ((column.source | trim == "") and (column.transform | trim == "")) -%}
      CAST(NULL AS {{column.fullDataType.toUpperCase()}})
    {%- else -%}
      {{- checkDimensionKeyColumn(alias = alias, columnName = column.source)}}
    {%- endif %}
    {%- if addColumnName %} AS {{column.name}}{%- endif %}{%br%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro inserts the artificial key insert statement -- #}
{% macro addAzureSQLArtificialKey(column = column, alias = table.name, zeroKeyInsert = false) %}
{%- if zeroKeyInsert -%}
  0
{%- elseif column.transform | trim != "" %}
  {{- alias}}.{{column.name}}
{%- else -%}
  {{alias}}.MAXKEY
{%- endif -%}
{% endmacro %}

{# -- This macro adds after load SQL transformation-- #}
{% macro postLoad() %}
{%- from table.columns as col where (col.transformType.name == "A") %}
       UPDATE $OBJECT$ {%- br %}
       SET {{col.name}} = {{col.source}}
       WHERE {{col.name}} IS NULL {%- br %}
       ; {%- br %}
{%- endfrom %}
{% endmacro %}

{# -- This macro adds the source columns and dss columns -- #}
{% macro addSetInsertColumnsAzureSQL(addArtificialKey = false, alias = "", zeroKeyInsert = false, ignoreDssColumns = false, addColumnName = true, keepCreateDate = false, ignoreDssVersion = false, firstChangingVersion = true, lastChangingVersion = true, indent = "       ", includeIdentity = true, includePreviousColumns = false)%}
  {%- from table.columns as column where (includeIdentity or column.fullDataType.toLowerCase.indexOf("integer identity") != 0) and ((not column.artificial) or (column.artificial and addArtificialKey) or (column.artificial and (not addArtificialKey) and column.transform | trim != "")) and ( includePreviousColumns or (table.subType != "P" or ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "false")))%}
    {%- if not loop.first %}{{indent}}, {% else %} {% endif %}
    {%- if column.artificial and addArtificialKey -%}
      {{- addAzureSQLArtificialKey(alias = "src", zeroKeyInsert=zeroKeyInsert)}}
    {%- elseif column.artificial and not addArtificialKey and column.transform | trim != "" -%}
      {%- for transLine in (column.transform | trim | lines) %}
        {%- if not loop.first %}          {% endif %}{{transLine}}{%- if not loop.last %}{%br%}{% endif %}
      {%- endfor %}
    {%- elseif column.transform | trim != "" %}
      {%- if alias != "" -%}
        {{alias}}.{{column.name}}
      {%- else -%}
        {%- for transLine in (column.transform | trim | lines) %}
          {%- if not loop.first %}          {% endif %}{{transLine}}{%- if not loop.last %}{%br%}{% endif %}
        {%- endfor %}
      {%- endif %}
    {%- elseif column.currentFlag and not ignoreDssColumns -%}
      {% if lastChangingVersion %}'Y'{% else %}'N'{% endif %}
    {%- elseif column.dssStartDate and not ignoreDssColumns -%}
      {% if firstChangingVersion %}{{settings.changeDetectionStartInitial}}{% elseif not lastChangingVersion %}{{table.name}}.{{column.name}}{% else %}{{settings.changeDetectionStartNew}}{% endif %}
    {%- elseif column.dssEndDate and not ignoreDssColumns -%}
      {% if lastChangingVersion %}{{settings.changeDetectionEndCurrent}}{% else %}{{settings.changeDetectionEndExpiring}}{% endif %}
    {%- elseif column.dssVersion and not ignoreDssColumns -%}
      {% if firstChangingVersion %}1{% elseif not lastChangingVersion %}{{table.name}}.{{column.name}}{% else %}{{table.name}}.{{column.name}} + 1{% endif %}
    {%- elseif (column.updateTime or column.createTime) and not ignoreDssColumns -%}
      {%- if column.createTime and keepCreateDate -%}
        {{column.name}}
      {%- else -%}
        CURRENT_TIMESTAMP
      {%- endif%}
    {%- elseif table.subType == "P" and ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "true") -%}
      {%- if alias == "" %}
        {%- fetch column.sourceColumn -%}
        {%- set prevColSrc = column.sourceColumn.name -%}
           CASE {{ table.name}}.{{prevColSrc}}{% br %}
             WHEN {{ column.source }}{% br %}
             THEN {{ table.name }}.{{ column.name}}{% br %}
             ELSE {{ table.name}}.{{ prevColSrc }}{% br %}
           END
      {%- else -%}
        {{- getColumnSource(alias = alias)}}
      {%- endif -%}
    {%- else -%}
      {{- getColumnSource(alias = alias)}}
    {%- endif %}
    {%- if addColumnName %} AS {{column.name}}{%- endif %}{%br%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro substitutes the source transformation -- #}
{# -- otherwise it adds the full name of the source column -- #}
{% macro getColumnSource(column = column, alias = "") %}
{%- if alias != "" %}{{alias}}.{{column.name}}
{%- else %}{{- checkDimensionKeyColumn(columnName = column.source)}} {%- endif %}
{% endmacro %}

{# -- This macro inserts the merge join condition -- #}
{% macro addMergeJoinCondition(alias = "", indentString="      ") %}
{%- from table.columns as column where column.businessKey or column.dssVersion %}
  {%- if loop.first %}ON  {% else %}{{indentString}}AND {% endif -%}
  {{table.name}}.{{column.name}} = {{alias}}.{{column.name}}{%br%}
{%- endfrom %}
{% endmacro %}

{# -- This macro adds the update columns to a merge -- #}
{% macro addMergeUpdateColumns(addArtificialKey = false, alias = "", indentString = "        ") %}
  {%- from table.columns as column where (not (column.artificial and addArtificialKey == false)) and (not column.createTime) and (not column.businessKey) %}
    {%- if not loop.first %}{{indentString}}, {% else %} {% endif -%}
    {{table.name}}.{{column.name}} = {{alias}}.{{column.name}}{%br%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the target columns and dss columns of the destination table-- #}
{% macro addSetInsertTargetColumns(indentString = "", includeIdentity = true, includePreviousColumns = false) %}
{#  {%- from table.columns as column where ( includePreviousColumns or (table.subType != "P" or ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "false"))) %}#}
  {%- from table.columns as column where (includeIdentity or column.fullDataType.toLowerCase.indexOf("integer identity") != 0) and ( includePreviousColumns or (table.subType != "P" or ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "false"))) %}
    {%- set businessKey = column.businessKey -%}
    {%- set sTargetColumn = column.name -%}
    {%- if loop.first %}
(  {{sTargetColumn}}
    {%- else %}
  {{indentString}}, {{sTargetColumn}}
    {%- endif -%}{%br%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the target columns and dss columns of the destination table-- #}
{% macro addSetInsertTargetColumns2(addArtificialKey = false, indentString = "      ") %}
  {%- from table.columns as column where (not column.artificial) or (column.artificial and addArtificialKey) or (column.artificial and (not addArtificialKey) and column.transform | trim != "")%}
    {%- set sTargetColumn = column.name -%}
    {%- if loop.first -%}
      {{indentString}}( {{sTargetColumn}}
    {%- else -%}
      {{indentString}}, {{sTargetColumn}}
    {%- endif -%}{%br%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds a COALESCE statement if the column is a dimension key,otherwise it adds the full name of the source column -- #}
{% macro checkDimensionKeyColumn(column = column, alias = "", columnName) %}
{%- if alias != "" %}
  {{- alias}}.{{column.name}}
{%- else %}
  {%- set fullName=columnName %}
  {%- for relation in table.relations %}
    {%- for fk in relation.fks %}
      {%- fetch fk.fromTable %}
      {%- fetch fk.toTable %}
      {%- from fk.toTable.columns as column where column.artificial %}
        {%- if fk.toTable.name+"."+column.name == columnName %}
          {%- set fullName = "COALESCE("+columnName+", 0)" %}
        {%- endif %}
      {%- endfrom %}
    {%- endfor %}
  {%- endfor %}{{fullName}}
{%- endif %}
{% endmacro %}

{% macro getBusinessKeyCol1Name() %}
{%- from table.columns as column where column.businessKey %}
  {%- if loop.first %}{{column.name}}{%- endif %}
{%- endfrom %}
{% endmacro %}

{% macro getArtificialKeyCol1Name() %}
{%- from table.columns as column where column.artificial %}
  {%- if loop.first %}{{column.name}}{%- endif %}
{%- endfrom %}
{% endmacro %}

{# --This macro adds the distinct keyword if configured -- #}
{% macro distinct() %}
{%- if settings.sourceJoinDetails.distinct -%}DISTINCT {% endif -%}
{% endmacro %}

{# --This macro adds a select hint if specified -- #}
{% macro addSelectHint() %}
{%- if settings.selectHint | trim != "" -%} WITH ( {{settings.selectHint}} ){%br%}{%- endif -%}
{% endmacro %}

{# --This macro adds a merge hint if specified -- #}
{% macro addMergeHint() %}
{%- if settings.mergeHint | trim != "" -%} WITH ( {{settings.mergeHint}} ){%- endif -%}
{% endmacro %}


{# -- This macro adds in logic for batch looping -- #}
{% macro addBatchLoopWhereClause(indent = "      ", dssFlag = false) %}
  {%- if settings.sourceJoinDetails.where | trim != "" or dssFlag %}
    {%- set nextWhere = "AND" %}
  {%- else %}
    {%- set nextWhere = "WHERE" %}
  {%- endif %}
  {%- if settings.batchProcessingField != "" %}
    {%- set sourceFound = false %}
    {%- for col in table.columns %}
      {%- if col.sourceColumn is defined and not sourceFound %}
        {%- fetch col.sourceColumn %}
        {%- if col.sourceColumn.name == settings.batchProcessingField %}
          {{- indent}}{{nextWhere}}    {{col.source}} = @v_batch_start {%br%}
          {%- set sourceFound = true %}
        {%- endif %}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{% endmacro %}


{% macro add_select_outerquery(indent = "", includeIdentity = true, includePreviousColumns = false) %}
  {%- from table.columns as column where (includeIdentity or column.fullDataType.toLowerCase.indexOf("integer identity") == -1) and (includePreviousColumns or (table.subType != "P" or (previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "false")) %}

  {%- set sTargetColumn = column.name -%}
  {%- if loop.first %}
    {%- if column.artificial %}
       ROW_NUMBER() OVER(PARTITION BY ISNULL(MAXKEY,0) ORDER BY {{ getBusinessKeyCol1Name() }}) + ISNULL(MAXKEY, 0) AS MAXKEY {% br %}
    {%- else %}
       {{ sTargetColumn }}
    {%- endif %}
  {%- elseif column.artificial %}
    ROW_NUMBER() OVER(PARTITION BY ISNULL(MAXKEY,0)ORDER BY {{ getBusinessKeyCol1Name() }}) + ISNULL(MAXKEY.MAXKEY, 0) AS MAXKEY {% br %}
  {%- else %}
    {{ indent }}, {{ sTargetColumn }}
  {%- endif %}{% br %}
  {%- endfrom %}
{% endmacro %}

{% macro addNewRowSelect ( indent = "    ", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag ) %}
  {{- indent }}SELECT {{ distinct() -}}
  {%- from table.columns as column %}
    {%- if not loop.first %}{{- indent }}      ,{% endif -%}
    {%- if column.transform | trim != "" -%}
      {%- from column.transform | trim | lines as transLine -%}
        {%- if not loop.first %}{{- indent }}       {% endif -%}
        {{- transLine -}}
        {%- if not loop.last %}{% br %}{% endif -%}
      {%- endfrom %} AS {{ column.name -}}{%- br -%}
		{%- elseif column.artificial -%}
      MAXKEY.MAXKEY AS MAXKEY{%- br -%}
    {%- elseif column.name == dssDeleteTime -%}
      CAST(NULL AS {{ column.fullDataType }}) AS {{column.name }}{%- br -%}
    {%- elseif column.name == dssDeleteFlag -%}
      'N' AS {{column.name }}{%- br -%}
    {%- elseif column.currentFlag -%}
      'Y' AS {{ column.name }}{%- br -%}
    {%- elseif not column.dss -%}
      {%- if table.subType == "P" and ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "true") -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{column.name }}{%- br -%}
      {%- else -%}
        {{- column.source }} AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- else -%}
      {%- if column.updateTime -%}
        CAST(CURRENT_TIMESTAMP AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        CAST(CURRENT_TIMESTAMP AS {{column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        {{settings.changeDetectionStartInitial}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssEndDate -%}
        {{settings.changeDetectionEndCurrent}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssVersion -%}
        1 AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{% macro addVersionedRowSelect ( indent = "    ", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag ) %}
  {{- indent }}SELECT {{ distinct() -}}
  {%- from table.columns as column %}
    {%- if not loop.first %}{{- indent }}      ,{% endif -%}
    {%- if column.transform | trim != "" -%}
      {%- from column.transform | trim | lines as transLine -%}
        {%- if not loop.first %}{{- indent }}       {% endif -%}
        {{- transLine -}}
        {%- if not loop.last %}{% br %}{% endif -%}
      {%- endfrom %} AS {{ column.name -}}{%- br -%}
    {%- elseif column.artificial -%}
      MAXKEY.MAXKEY AS MAXKEY{%- br -%}
    {%- elseif column.name == dssDeleteTime -%}
      CAST(NULL AS {{ column.fullDataType }}) AS {{column.name }}{%- br -%}
    {%- elseif column.name == dssDeleteFlag -%}
      'N' AS {{column.name }}{%- br -%}
    {%- elseif column.currentFlag -%}
      'Y' AS {{ column.name }}{%- br -%}
    {%- elseif not column.dss -%}
      {{ column.source }} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        CAST(CURRENT_TIMESTAMP AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        CAST(CURRENT_TIMESTAMP AS {{column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        {{settings.changeDetectionStartNew}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssEndDate -%}
        {{settings.changeDetectionEndCurrent}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssVersion -%}
        {{table.name}}.{{column.name}} + 1 AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}


{% macro addType2TrackedWhere ( indent = "    ", compareOperator = "=", whereType = "AND", compareType = "OR", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag, nullSupport = true ) %}
  {{- indent }}-- tracked columns{% br %}
  {%- from table.columns as column where column.slowlyChanging %}
    {%- if loop.first -%}{{- indent }}{{ whereType }}   (
    {%- else %}{{- indent }}{{ compareType }}
    {%- endif %}
    {%- if nullSupport %}{% if not loop.first %}    {% endif %}COALESCE(CAST({% else %} {% endif -%}
    {{- column.source -}}
    {%- if nullSupport %} AS VARCHAR(8000)),'~') {% else %} {% endif -%}
    {{- compareOperator -}}
    {%- if nullSupport %} COALESCE(CAST({% else %} {% endif %}
    {{- table.name }}.{{ column.name -}}
    {%- if nullSupport %} AS VARCHAR(8000)),'~'){% endif -%}
    {%- br -%}
    {%- if loop.last %}{{- indent }}){%br%}{%- endif %}
  {%- endfrom %}
{% endmacro %}

{% macro addType2UntrackedWhere ( indent = "    ", compareOperator = "=", whereType = "AND", compareType = "OR", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag, nullSupport = true ) %}
  {{- indent }}-- untracked columns{% br %}
  {%- from table.columns as column where not ( column.slowlyChanging or column.businessKey or column.dss or column.artificial or ( column.name == dssDeleteTime ) or ( column.name == dssDeleteFlag ) ) %}
    {%- if loop.first -%}{{- indent }}{{ whereType }}   (
    {%- else %}{{- indent }}{{ compareType }}
    {%- endif %}
    {%- if nullSupport %}{% if not loop.first %}    {% endif %}COALESCE(CAST({% else %} {% endif -%}
    {{- column.source -}}
    {%- if nullSupport %} AS VARCHAR(8000)),'~') {% else %} {% endif -%}
    {{- compareOperator -}}
    {%- if nullSupport %} COALESCE(CAST({% else %} {% endif %}
    {{- table.name }}.{{ column.name -}}
    {%- if nullSupport %} AS VARCHAR(8000)),'~'){% endif -%}
    {%- br -%}
    {%- if loop.last %}{{- indent }}){%br%}{%- endif %}
  {%- endfrom %}
{% endmacro %}

{% macro addFromClause ( indent = "    " ) %}
  {%- for joinLine in (settings.sourceJoinDetails.join | trim | lines)%}{{ indent }}{{ joinLine | trim }}{%br%}{%- endfor %}
{% endmacro %}

{% macro addWhereClause ( indent = "    " ) %}
  {%- for whereLine in (settings.sourceJoinDetails.where | trim | lines)%}{{ indent }}{{whereLine | trim}}{%br%}{%- endfor%}
{% endmacro %}

{% macro addGroupByClause ( indent = "    " ) %}
  {%- for groupByLine in (settings.sourceJoinDetails.groupBy | trim | lines)%}{{ indent }}{{groupByLine | trim}}{%br%}{%- endfor %}
{% endmacro %}

{% macro addJoinToTarget ( joinType = "LEFT OUTER", indent = "    " ) %}
  {{- indent}}{{ joinType }} JOIN [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
  {%- from table.columns as column where column.businessKey %}
    {%- if loop.first %}{{- indent}}ON {%- else %}{{- indent}}AND {%- endif %} {{column.source}} = {{table.name}}.{{column.name}}{%br%}
  {%- endfrom %}
{% endmacro %}

{% macro addType2ExpiringRowSelect ( indent = "    ", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag ) %}
  {{- indent }}SELECT {{ distinct() -}}
  {%- from table.columns as column  %}
    {%- if not loop.first %}{{- indent }}     ,{% else %} {% endif -%}
    {%- if column.artificial -%}
      0 AS MAXKEY{%- br -%}
    {%- elseif column.currentFlag -%}
      'N' AS {{ column.name }}{%- br -%}
    {%- elseif not column.dss -%}
      {{ table.name }}.{{ column.name}} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        CAST(CURRENT_TIMESTAMP AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssEndDate -%}
        {{settings.changeDetectionEndExpiring}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssVersion -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
			{%- elseif column.dssLoadDate -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro inserts the join back to the target -- #}
{% macro addWhereJoinToTargetMaxVersion(indent="        ") %}
  {%- from table.columns as column where column.businessKey -%}
    {%- if loop.first %}WHERE {% else %}{{indent}}AND   {% endif %}maxversion.{{column.name}} = {{table.name}}.{{column.name}}{%- if not loop.last %}{%br%}{%- endif %}
  {%- endfrom -%}
{% endmacro %}

{# -- This macro inserts the join back to the target -- #}
{% macro addWhereJoinToTarget(indent="        ") %}
  {%- from table.columns as column where column.businessKey -%}
    {%- if loop.first %}WHERE {% else %}{{indent}}AND   {% endif %}{{column.source}} = {{table.name}}.{{column.name}}{%- if not loop.last %}{%br%}{%- endif %}
  {%- endfrom -%}
{% endmacro %}

{% macro addMaxKeyJoin ( indent = "    " ) %}
  {%- from table.columns as artificialKey where artificialKey.artificial -%}
    {%- if loop.first -%}
      {{- indent }}CROSS JOIN ( SELECT MAX({{artificialKey.name}}) AS MAXKEY FROM [TABLEOWNER].[{{table.name}}]) AS MAXKEY{% br %}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the select from the target table -- #}
{% macro addMergeTargetColumnsSelect ( indent = "    " ) %}
  {{- indent }}SELECT
  {%- from table.columns as column %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {%- if column.artificial -%}
      0 AS MAXKEY{%- br -%}
    {%- elseif column.updateTime -%}
      CAST(CURRENT_TIMESTAMP AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
    {%- else -%}
      {{- table.name}}.{{column.name}}{%- br -%}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{% macro addChangedRowSelect ( indent = "    ", dssDeleteTime = dssDeleteTime, dssDeleteFlag = dssDeleteFlag ) %}
  {{- indent }}SELECT {{ distinct() -}}
  {%- from table.columns as column  %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {%- if column.artificial -%}
      0 AS MAXKEY{%- br -%}
    {%- elseif column.name == dssDeleteTime -%}
      {%- if table.subType == "H" or table.subType == "C" -%}
        {{ table.name }}.{{ column.name }}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType}})
      {%- endif %} AS {{ column.name }}{%- br -%}
    {%- elseif column.name == dssDeleteFlag -%}
      {%- if table.subType == "H" or table.subType == "C" -%}
        {{ table.name }}.{{ column.name }}
      {%- else -%}
        'N'
      {%- endif %} AS {{ column.name }}{%- br -%}
    {%- elseif not column.dss -%}
      {%- if table.subType == "P" and ((previousColumn("DB_TYPE_3_COLS",column.name)|trim) == "true") -%}
        {%- fetch column.sourceColumn -%}
        {%- set prevColSrc = column.sourceColumn.name -%}
           CASE {{ table.name}}.{{prevColSrc}}{% br %}
           {{- indent}}         WHEN {{ column.source }}{% br %}
           {{- indent}}         THEN {{ table.name }}.{{ column.name}}{% br %}
           {{- indent}}         ELSE {{ table.name}}.{{ prevColSrc }}{% br %}
           {{- indent}}       END AS {{ column.name }}{%- br -%}
      {%- else -%}
        {{- column.source }} AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- else -%}
      {%- if column.updateTime -%}
        CAST(CURRENT_TIMESTAMP AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssEndDate -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssVersion -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.currentFlag -%}
        'Y' AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the joins to the dimensions -- #}
{% macro addDimensionJoins(indent = "") %}
{%- for relation in table.relations %}
  {%- for fk in relation.fks %}
  {%- fetch fk.fromTable %}
  {%- fetch fk.toTable %}
  {%- if loop.index == 0 %}{{- indent }}    LEFT OUTER JOIN [TABLEOWNER].[{{fk.toTable.name}}] {{fk.toTable.name}}{%br%}{%- endif %}
  {{- indent }}{%- if loop.index == 0 %}    ON {%- else %}AND
  {%- endif %} {{fk.fromTable.name}}.{{fk.fromColumn.name}} = {{fk.toTable.name}}.{{fk.toColumn.name}}{%br%}
  {%- if loop.last %}
    {%- if relation.currentFlag and relation.trackingDateColumn == null %}{{addWhereCurrentFlag(fk.toTable, firstInClause = false, nullIndicator = false)}}{%br%}
    {%- elseif relation.useDateColForTrackingChangingDimTable and relation.trackingDateColumn != null %}{{- indent }}AND {{relation.trackingDateColumn.source}} BETWEEN {#- no line break #}
               {#- no indent #} {{fk.toTable.name}}.{{getStartEndColumn(fk.toTable, 1)}} AND {{fk.toTable.name}}.{{getStartEndColumn(fk.toTable, 0)}}{%br%}
    {%- endif %}
  {%- endif %}
  {%- endfor %}
{%- endfor %}
{% endmacro %}

{# -- This macro adds the start/end column  (used in macro addDimensionJoins) -- #}
{% macro getStartEndColumn(relationTable, startIndicator) %}
 {%- set rangeStart = "" %}
 {%- set rangeEnd = "" %}
 {%- set dssStart = "" %}
 {%- set dssEnd = "" %}
 {%- for column in relationTable.columns %}
    {%- if column.dssStartDate and startIndicator == 1 %} {%- set dssStart = column.name %}
    {%- elseif column.dssEndDate and startIndicator == 0 %} {%- set dssEnd = column.name %}
    {%- elseif column.rangeStart %} {%- set rangeStart = column.name %}
    {%- elseif column.rangeEnd %} {%- set rangeEnd = column.name %}
    {%- endif %}
{%- endfor %}
{%- if startIndicator == 1 %}
{%- if rangeStart != "" %}{{rangeStart}} {%- else %}{{dssStart}} {%- endif %}
{%- elseif startIndicator == 0 %}
{%- if rangeStart != "" %}{{rangeEnd}} {%- else %}{{dssEnd}} {%- endif %}
{%- endif %}
{% endmacro %}

{#-- This macro adds the where-clause for the current flag to the statement -- #}
{% macro addWhereCurrentFlag(joinTable = table, firstInClause, nullIndicator) %}
{#- Filter on current only #}
{%- for column in joinTable.columns %}
{%- if column.currentFlag %}
    {%- if firstInClause == true %}
  WHERE
{% set firstInClause = false %}
{%- else %}
  AND {% endif %} {{joinTable.name}}.{{column.name}} = 'Y'
{%- if nullIndicator == true %}OR    {{joinTable.name}}.{{column.name}} is NULL{%br%}{%- endif %}
{%- endif %}
{%- endfor %}
{% endmacro %}

{#-- This macro adds the left outer join in insert statement for History template -- #}
{%- macro addLeftOuterJoin(indent="  ")-%}
{{indent}}LEFT OUTER JOIN (
    SELECT
    {%- from table.columns as column where column.businessKey %}
    {%- if loop.first -%}
      {{indent}}{{column.name}}{% br %}
    {%- else -%}
      {{indent}}{{indent}}, {{column.name}}{% br %}
    {%- endif -%}    
    {%- endfrom %}
    , MAX(dss_version) dss_version{% br %}
    FROM [TABLEOWNER].[{{table.name}}] AS {{table.name}}{% br %}
    GROUP BY 
    {%- from table.columns as column where column.businessKey %}
    {%- if loop.first -%}
      {{indent}}{{column.name}}{% br %}
    {%- else -%}
      {{indent}}{{indent}}, {{column.name}}{% br %}
    {%- endif -%}    
    {%- endfrom %}
    ) AS vers{% br %}
    ON
    {%- from table.columns as column where column.businessKey -%}
    {%- fetch column.sourceTable %}
    {% if not loop.first %}AND{% endif %}
    {{column.sourceTable.name}}.{{column.name}} = vers.{{column.name}}{% br %}
    {%- endfrom %}
{%- endmacro -%}

{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}
{# -- The following macros are sql server procedure wrapper specific macros                                                                                 -- #}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}

{# -- This macro inserts the procedure header including parameters and declarations -- #}
{% macro addProcedureHeader(deleteBeforeInsert, deleteBeforeInsertTruncate) %}
CREATE PROCEDURE [SCHEMA.{{settings.procedureName}}].{{settings.procedureName}}{%br%}
{{addProcedureParameters()}}{%br%}
AS{%br%}
{{addProcedureOptions()}}{%br%}
{{addProcedureDeclares(deleteBeforeInsert, deleteBeforeInsertTruncate)}}{%br%}
{% endmacro %}

{# -- This macro inserts the procedure comment block -- #}
{% macro addProcedureCommentBlock(indentString = "  ", commentMessage = "Hello") %}
{{- indentString -}}--====================================================={%br%}
{{- indentString -}}-- {{commentMessage}}{%br%}
{{- indentString -}}--====================================================={%br%}
{% endmacro %}

{# -- This macro inserts the procedure parameters-- #}
{% macro addProcedureParameters() %}
  @p_sequence         INTEGER{%br%}
, @p_job_name         VARCHAR(256){%br%}
, @p_task_name        VARCHAR(256){%br%}
, @p_job_id           INTEGER{%br%}
, @p_task_id          INTEGER{%br%}
, @p_return_msg       VARCHAR(1024) OUTPUT{%br%}
, @p_status           INTEGER       OUTPUT
{% endmacro %}

{# -- This macro inserts the procedure options -- #}
{% macro addProcedureOptions() %}
  SET XACT_ABORT OFF  -- Turn off auto abort on errors{%br%}
  SET NOCOUNT ON      -- Turn off row count messages
{% endmacro %}

{# -- This macro inserts the procedure declarations -- #}
{% macro addProcedureDeclares(deleteBeforeInsert, deleteBeforeInsertTruncate) %}
  {{- addProcedureCommentBlock(commentMessage = "Control variables used in most programs")}}
  DECLARE{%br%}
    @v_msgtext               VARCHAR(1024) -- Text for audit_trail{%br%}
  , @v_sql                   NVARCHAR(255) -- Text for SQL statements{%br%}
  , @v_step                  INTEGER       -- return code{%br%}
  , @v_merged_count          INTEGER       -- no of records merged{%br%}
  , @v_insert_count          INTEGER       -- no of records inserted{%br%}
  , @v_update_count          INTEGER       -- no of records updated{%br%}
  {%- if deleteBeforeInsert and not deleteBeforeInsertTruncate %}
  , @v_delete_count          INTEGER       -- no of records deleted{%br%}
  {%- endif %}
  , @v_dim_insert_count      INTEGER       -- no of records inserted to Dimension{%br%}
  , @v_return_status         INTEGER       -- Update result status{%br%}
  , @v_current_datetime      DATETIME      -- Used for date insert{%br%}{%br%}
  {{- addProcedureCommentBlock(commentMessage = "General Variables")}}
{% endmacro %}

{# -- This macro inserts the procedure exception handler -- #}

{% macro addReturnMessage(deleteBeforeInsert, deleteBeforeInsertTruncate, addMerge = TRUE, addInsert = FALSE, addUpdate = FALSE, addDimInsert = FALSE) %}
    SET @p_status = 1{%br%}
    SET @p_return_msg = '{{table.name}} updated. '{%br%}
  {%- if deleteBeforeInsert and not deleteBeforeInsertTruncate %}
      + CONVERT(VARCHAR,@v_delete_count) + ' records deleted. '{%br%}
  {%- endif %}
  {%- if addMerge %}
      + CONVERT(VARCHAR,@v_merged_count) + ' records merged.'{%br%}
  {%- endif %}
  {%- if addInsert %}
      + CONVERT(VARCHAR,@v_insert_count) + ' records inserted.'{%br%}
  {%- endif %}
  {%- if addUpdate %}
      + CONVERT(VARCHAR,@v_update_count) + ' records updated.'{%br%}
  {%- endif %}{%br%}
  {%- if addDimInsert %}
      + CONVERT(VARCHAR,@v_dim_insert_count) + ' records auto added in {{listSurrogateKeyColumnssourcetable()}}.'{%br%}
  {%- endif %}{%br%}
    RETURN 0{%br%}{%br%}
{% endmacro %}

{# -- This macro inserts the procedure exception handler -- #}
{% macro addProcedureException() %}
  BEGIN CATCH{%br%}{%br%}
    SET @p_status = -2{%br%}
    SET @p_return_msg = SUBSTRING('{{settings.procedureName}} FAILED with error '{%br%}
      + CONVERT(VARCHAR,ISNULL(ERROR_NUMBER(),0)){%br%}
      + ' Step ' + CONVERT(VARCHAR,ISNULL(@v_step,0)){%br%}
      + '. Error Msg: ' + ERROR_MESSAGE(),1,1023){%br%}{%br%}
  END CATCH{%br%}
  IF XACT_STATE() <> 0{%br%}
  BEGIN{%br%}
    ROLLBACK TRANSACTION{%br%}
  END{%br%}{%br%}
  RETURN 0{%br%}
{% endmacro %}

{# -- This macro declares the variable for stage for auto add -- #}
{% macro declareStageVariables(indentString = "", includeIdentity = true, includePreviousColumns = false) %}
  {%- set variables = [] -%}

  {%- from table.columns as column where (includeIdentity or column.fullDataType.toLowerCase.indexOf("integer identity") != 0) and (includePreviousColumns or (table.subType != "P" or ((previousColumn("DB_TYPE_3_COLS", column.name)|trim) == "false"))) %}
    {%- set variableName = "@v_stage_" + column.name -%}
    {%- set dataType = column.fullDataType -%}

    {%- set variables = variables + [variableName ~ "    " ~ dataType] -%}
  {%- endfrom %}

DECLARE {%br%}
  {%- for variable in variables %}
    {{indentString}}{{variable}}{% if not loop.last %}, {% endif %}{%br%}
  {%- endfor %}
{% endmacro %}

{# -- This macro retrieve the business key of dimension from lookup -- #}
{% macro listDimBusinessKeyColumns(indentString = "") -%}
  {%- set columnDetails = [] -%}

  {%- for relation in table.relations -%}
    {%- for fk in relation.fks -%}
      {%- fetch fk.toColumn -%}
        {%- set columnDetails = fk.toColumn.name  -%}
    {{indentString}}{{columnDetails}}{% if not loop.last %}{%br%}{% endif %}
    {%- endfor -%}
  {%- endfor -%}
{%- endmacro %}

{# -- This macro lists the fetch variables for the cursor -- #}
{% macro fetchStageVariables(indentString = "", includeIdentity = true, includePreviousColumns = false) %}
  {%- from table.columns as column where (includeIdentity or column.fullDataType.toLowerCase.indexOf("integer identity") != 0) and (includePreviousColumns or (table.subType != "P" or ((previousColumn("DB_TYPE_3_COLS", column.name)|trim) == "false"))) %}

    {%- set variableName = "@v_stage_" + column.name -%}
    {%- set dataType = column.fullDataType -%}

    {%- if loop.last %}
      {{indentString}}{{variableName}}{%br%}
    {%- else %}
      {{indentString}}{{variableName}}, {%br%}
    {%- endif %}
  {%- endfrom %}
{% endmacro %}




{# -- This macro lists the surrogate key columns of stage -- #}
{% macro listSurrogateKeyColumns(table, indentString = "") -%}
  {% set uniqueSourceTables = [] %}

  {%- for col in table.columns -%}
    {%- if not col.sourceTable is empty -%}
      {%- fetch col.sourceTable -%}
        {%- if not uniqueSourceTables contains col.sourceTable -%}
          {%- list uniqueSourceTables add col.sourceTable -%}
        {%- endif -%}
      {%- endif -%}
  {%- endfor -%}

  {%- for sTable in uniqueSourceTables -%}
    {%- if sTable.objectType.name == "Dimension" -%}
      {%- for col in table.columns -%}
        {%- if col.sourceTable == sTable -%}
{{ indentString }}{{ col.name }}{%- endif -%}
      {%- endfor -%}
    {%- endif -%}
  {%- endfor -%}
{%- endmacro %}

{# -- This macro lists the source table of surrogate key columns -- #}
{% macro listSurrogateKeyColumnssourcetable(table, indentString = "") -%}
  {% set uniqueSourceTables = [] %}

  {%- for col in table.columns -%}
    {%- if not col.sourceTable is empty -%}
      {%- fetch col.sourceTable -%}
        {%- if not uniqueSourceTables contains col.sourceTable -%}
          {%- list uniqueSourceTables add col.sourceTable -%}
        {%- endif -%}
      {%- endif -%}
  {%- endfor -%}

  {%- for sTable in uniqueSourceTables -%}
    {%- if sTable.objectType.name == "Dimension" -%}
      {%- for col in table.columns -%}
        {%- if col.sourceTable == sTable -%}
          {% set SourceTableName = sTable.name %}
{{ indentString }}{{ SourceTableName }}{%- endif -%}
      {%- endfor -%}
    {%- endif -%}
  {%- endfor -%}
{%- endmacro %}

{# -- This macro lists the dss columns of dimension source table -- #}
{% macro dssDimColumns(table, indentString = "          ") -%}
{% set uniqueSourceTables = [] %}
{%- for col in table.columns -%}
  {%- if not col.sourceTable is empty -%}
    {%- fetch col.sourceTable -%}
      {%- if not uniqueSourceTables contains col.sourceTable -%}
        {%- list uniqueSourceTables add col.sourceTable -%}
      {%- endif -%}
    {%- endif -%}
{%- endfor -%}
{%- for sTable in uniqueSourceTables -%}
  {%- if sTable.objectType.name == "Dimension" -%}
    {%- for column in sTable.columns -%}
    {%- set dataType = column.fullDataType -%}
      {%- if column.updateTime -%}
      {{ indentString }},{{column.name}}{%br%}
      {%- elseif column.createTime -%}
      {{ indentString }},{{column.name}}{%br%}
      {%- elseif column.dssLoadDate -%}
      ,{{column.name}}{%br%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}
{%- endmacro %}

{# -- This macro generates commane separated GETDATE() list for auto add insert -- #}
{% macro getdateForDss(table, indentString = "          ") -%}
{% set uniqueSourceTables = [] %}
{%- for col in table.columns -%}
  {%- if not col.sourceTable is empty -%}
    {%- fetch col.sourceTable -%}
      {%- if not uniqueSourceTables contains col.sourceTable -%}
        {%- list uniqueSourceTables add col.sourceTable -%}
      {%- endif -%}
    {%- endif -%}
{%- endfor -%}
{%- for sTable in uniqueSourceTables -%}
  {%- if sTable.objectType.name == "Dimension" -%}
    {%- for column in sTable.columns -%}
    {%- set dataType = column.fullDataType -%}
      {%- if column.updateTime -%}
      {{ indentString }},GETDATE(){%br%}
      {%- elseif column.createTime -%}
      {{ indentString }},GETDATE(){%br%}
      {%- elseif column.dssLoadDate -%}
      ,GETDATE(){%br%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}
{%- endmacro %}
