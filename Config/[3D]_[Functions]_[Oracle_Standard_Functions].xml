<?xml version="1.0" encoding="UTF-8"?>
<database_function_set xmlns="http://www.wherescape.com/xml/red" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Oracle Standard Functions" xsi:schemaLocation="http://www.wherescape.com/xml/red Database%20Function%20Set.xsd">
  <database>Oracle</database>
  <meta_version>1</meta_version>
  <functional_groups>
    <functional_group name="Number">
      <functions>
        <function name="Absolute Value (ABS)">
          <function_id>absolute value</function_id>
          <function_expression>ABS</function_expression>
          <description>Returns the absolute value of the number. Essentially converts all values to positive\r\nExample: ABS(load_sales.tax)</description>
          <syntax>ABS(numeric_column)</syntax>
          <model>ABS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Ceiling (CEIL)">
          <function_id>ceiling</function_id>
          <function_expression>CEIL</function_expression>
          <description>Returns the smallest integer or whole number that is greater than or equal to the value supplied\r\nExample: CEIL(load_sales.tax)</description>
          <syntax>CEIL(numeric_column)</syntax>
          <model>CEIL(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Cosine (COS)">
          <function_id>cosine</function_id>
          <function_expression>COS</function_expression>
          <description>Returns the trigonometric cosine for an angle expressed in radians.\r\nExample: COS(load_sales.value)</description>
          <syntax>COS(numeric_column)</syntax>
          <model>COS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Hyperbolic Cosine (COSH)">
          <function_id>hyperbolic cosine</function_id>
          <function_expression>COSH</function_expression>
          <description>Returns the hyperbolic cosine for an angle.\r\nExample: COSH(load_sales.value)</description>
          <syntax>COSH(numeric_column)</syntax>
          <model>COSH(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Exponent (EXP)">
          <function_id>exponent</function_id>
          <function_expression>EXP</function_expression>
          <description>Returns e raised to the specified power. e = 2.718281828...\r\nExample: EXP(3)</description>
          <syntax>EXP(n)</syntax>
          <model>EXP(n)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>5</default_column_end>
        </function>
        <function name="Floor (FLOOR)">
          <function_id>floor</function_id>
          <function_expression>FLOOR</function_expression>
          <description>Returns the smallest integer or whole number that is less than or equal to the value supplied\r\nExample: FLOOR(load_sales.tax)</description>
          <syntax>FLOOR(numeric_column)</syntax>
          <model>FLOOR(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Natural Logarithm (LN)">
          <function_id>natural logarithm</function_id>
          <function_expression>LN</function_expression>
          <description>Returns the natural, or base 'e' logarithm of the supplied value\r\nExample: LN(10.34)</description>
          <syntax>LN(n)</syntax>
          <model>LN(n)</model>
          <default_column_start>3</default_column_start>
          <default_column_end>4</default_column_end>
        </function>
        <function name="Base 10 Logarithm (LOG)">
          <function_id>base 10 logarithm</function_id>
          <function_expression>LOG</function_expression>
          <description>Returns the base10 logarithm of the supplied value\r\nExample: LOG(10,100)</description>
          <syntax>LOG(base,number)</syntax>
          <model>LOG(base,number)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>15</default_column_end>
        </function>
        <function name="Modulus (MOD)">
          <function_id>modulus</function_id>
          <function_expression>MOD</function_expression>
          <description>Returns the remainder of a value divided by a divisor.\r\nExample: MOD(load_sales.boxes,4).</description>
          <syntax>MOD(numeric_column,divisor)</syntax>
          <model>MOD(numeric_column,divisor)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <function_id>if null value</function_id>
          <function_expression>NVL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
          <syntax>NVL(numeric_column,default_value)</syntax>
          <model>NVL(numeric_column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Raise to Exponent (POWER)">
          <function_id>raise to exponent</function_id>
          <function_expression>POWER</function_expression>
          <description>Returns the value raise to the exponent.\r\nExample: POWER(3,3) = 27</description>
          <syntax>POWER(numeric_column,exponent)</syntax>
          <model>POWER(numeric_column,exponent)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Round (ROUND)">
          <function_id>round</function_id>
          <function_expression>ROUND</function_expression>
          <description>Returns a numeric value rounded to a given nuber of places (integer) to the right of the decimal point. \r\nIf you omit integer, then n is rounded to 0 places.\r\nExample: ROUND(12.399,1) = 12.4</description>
          <syntax>ROUND(numeric_column [, integer ])</syntax>
          <model>ROUND(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Sign (SIGN)">
          <function_id>sign</function_id>
          <function_expression>SIGN</function_expression>
          <description>Returns either 0, 1, or -1 depending on the passed value. Zero if the passed value is zero.\r\nExample: SIGN(load_sales.value)</description>
          <syntax>SIGN(numeric_column)</syntax>
          <model>SIGN(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sine (SIN)">
          <function_id>sine</function_id>
          <function_expression>SIN</function_expression>
          <description>Returns the trigonometric sine for an angle expressed in radians.\r\nExample: SIN(load_sales.value)</description>
          <syntax>SIN(numeric_column)</syntax>
          <model>SIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Hyperbolic Sine (SINH)">
          <function_id>hyperbolic sine</function_id>
          <function_expression>SINH</function_expression>
          <description>Returns the hyperbolic sine for an angle.\r\nExample: SINH(load_sales.value)</description>
          <syntax>SINH(numeric_column)</syntax>
          <model>SINH(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Square Root (SQRT)">
          <function_id>square root</function_id>
          <function_expression>SQRT</function_expression>
          <description>Returns the square root of the value supplied.\r\nExample: SQRT(load_sales.value)</description>
          <syntax>SQRT(numeric_column)</syntax>
          <model>SQRT(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Tangent (TAN)">
          <function_id>tangent</function_id>
          <function_expression>TAN</function_expression>
          <description>Returns the trigonometric tangent for an angle expressed in radians.\r\nExample: TAN(load_sales.value)</description>
          <syntax>TAN(numeric_column)</syntax>
          <model>TAN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Hyperbolic Tangent (TANH)">
          <function_id>hyperbolic tangent</function_id>
          <function_expression>TANH</function_expression>
          <description>Returns the hyperbolic tangent for an angle.\r\nExample: TANH(load_sales.value)</description>
          <syntax>TANH(numeric_column)</syntax>
          <model>TANH(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Truncate (TRUNC)">
          <function_id>truncate</function_id>
          <function_expression>TRUNC</function_expression>
          <description>Returns numeric value truncated to a given number (integer) of decimal places. \r\nIf the number of places is omitted, then the value is truncated to 0 places.\r\nExample: TRUNC(12.399,1) = 12.3</description>
          <syntax>TRUNC(numeric_column [, integer ])</syntax>
          <model>TRUNC(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="String">
      <functions>
        <function name="ASCII value (ASCII)">
          <function_id>ascii value</function_id>
          <function_expression>ASCII</function_expression>
          <description>Returns the ascii value of the first character in the string\r\nExample: ASCII(load_customer.name)</description>
          <syntax>ASCII(string_column)</syntax>
          <model>ASCII(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Character (CHR)">
          <function_id>character</function_id>
          <function_expression>CHR</function_expression>
          <description>Returns a character whose ASCII value is the passed integer.\r\nExample: CHR(65)</description>
          <syntax>CHR(integer)</syntax>
          <model>CHR(integer)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>11</default_column_end>
        </function>
        <function name="Concatenate (CONCAT)">
          <function_id>concatenate</function_id>
          <function_expression>CONCAT</function_expression>
          <description>Returns a string that is a concatenation of the two passed strings.\r\nExample: CONCAT(load_customer.first_name,load_customer.last_name)</description>
          <syntax>CONCAT(string_column, string_column)</syntax>
          <model>CONCAT(string_column, string_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <function_id>if null value</function_id>
          <function_expression>NVL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.payment_method,'Cash).</description>
          <syntax>NVL(string_column,default_value)</syntax>
          <model>NVL(string_column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="Initial Capital (INITCAP)">
          <function_id>initial capital</function_id>
          <function_expression>INITCAP</function_expression>
          <description>Returns a string where the first letter of every word of a string column is converted to upper case.\r\nExample: INITCAP(load_customer.name)</description>
          <syntax>INITCAP(string_column)</syntax>
          <model>INITCAP(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Length (LENGTH)">
          <function_id>length</function_id>
          <function_expression>LENGTH</function_expression>
          <description>Returns an integer value containing the number of characters in the string column.\r\nExample: LENGTH(load_customer.name)</description>
          <syntax>LENGTH(string_column)</syntax>
          <model>LENGTH(string_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Locate (INSTR)">
          <function_id>locate</function_id>
          <function_expression>INSTR</function_expression>
          <description>Returns an integer value containing the starting position of the search string, or zero if the search string is not found.\r\nExample: INSTR(load_customer.name,'smith',1,1)</description>
          <syntax>INSTR(string_column,'search string' [ ,start position [ , occurrence ] ] )</syntax>
          <model>INSTR(string_column,'search string' [ ,start position [ , occurrence ] ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Lower (LOWER)">
          <function_id>lower</function_id>
          <function_expression>LOWER</function_expression>
          <description>Returns a string where every character in the passed column data is converted to lower case.\r\nExample: LOWER(load_customer.name)</description>
          <syntax>LOWER(string_column)</syntax>
          <model>LOWER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Left Pad (LPAD)">
          <function_id>left pad</function_id>
          <function_expression>LPAD</function_expression>
          <description>Returns a string which is the passed column data padded to the left with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
          <syntax>LPAD(string_column,length [, 'character'])</syntax>
          <model>LPAD(string_column,length [, 'character'])</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Left Trim (LTRIM)">
          <function_id>left trim</function_id>
          <function_expression>LTRIM</function_expression>
          <description>Returns a string which is the passed column data where all of the leading characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: LTRIM(load_customer.name,'+-=')</description>
          <syntax>LTRIM(string_column [ ,'character' ] )</syntax>
          <model>LTRIM(string_column [ ,'character' ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Replace (REPLACE)">
          <function_id>replace</function_id>
          <function_expression>REPLACE</function_expression>
          <description>Returns a string where all occurrences of the 'if' string are replaced with the 'then string.\r\nIf no 'then' string is supplied all occurrences of the 'if' string are deleted.\r\nExample: REPLACE(load_customer.name,'SMYTH','SMITH')</description>
          <syntax>REPLACE(string_column,if [ , then ] )</syntax>
          <model>REPLACE(string_column,if [ , then ] )</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Right Pad (RPAD)">
          <function_id>right pad</function_id>
          <function_expression>RPAD</function_expression>
          <description>Returns a string which is the passed column data padded to the right with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
          <syntax>RPAD(string_column,length [ , 'character' ] )</syntax>
          <model>RPAD(string_column,length [ , 'character' ] )</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Right Trim (RTRIM)">
          <function_id>right trim</function_id>
          <function_expression>RTRIM</function_expression>
          <description>Returns a string which is the passed column data where all of the trailing characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: RTRIM(load_customer.name,'+-=')</description>
          <syntax>RTRIM(string_column [ ,'character' ] )</syntax>
          <model>RTRIM(string_column [ ,'character' ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sounds Like (SOUNDEX)">
          <function_id>sounds like</function_id>
          <function_expression>SOUNDEX</function_expression>
          <description>Used in a comparison situation. This function returns a sound code that can be used to compare against a second sound code.\r\nExample: CASE WHEN SOUNDEX(load_customer.last_name) = SOUNDEX('smith') THEN 'smith'\r\nELSE load_customer.last_name END</description>
          <syntax>SOUNDEX(string_column)</syntax>
          <model>SOUNDEX(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Sub String (SUBSTR)">
          <function_id>sub string</function_id>
          <function_expression>SUBSTR</function_expression>
          <description>Returns a sub string of the passed column data. The start position and length of the substring are normally supplied.\r\nExample: SUBSTR(load_customer.name,INSTR(load_customer.name,' ')+1,10)</description>
          <syntax>SUBSTR(string_column, start [ ,count ] )</syntax>
          <model>SUBSTR(string_column, start [ ,count ] )</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Translate (TRANSLATE)">
          <function_id>translate</function_id>
          <function_expression>TRANSLATE</function_expression>
          <description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
          <syntax>TRANSLATE(string_column, if, then )</syntax>
          <model>TRANSLATE(string_column, if, then )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Upper (UPPER)">
          <function_id>upper</function_id>
          <function_expression>UPPER</function_expression>
          <description>Returns a string where every character in the passed column data is converted to upper case.\r\nExample: UPPER(load_customer.name)</description>
          <syntax>UPPER(string_column)</syntax>
          <model>UPPER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Date">
      <functions>
        <function name="Add Months (ADD_MONTHS)">
          <function_id>add months</function_id>
          <function_expression>ADD_MONTHS</function_expression>
          <description>Returns a date which has had the specified number of months added to it.\r\nExample: ADD_MONTHS(load_customer.start_date,36)</description>
          <syntax>ADD_MONTHS(date_column,number_of_months)</syntax>
          <model>ADD_MONTHS(date_column,number_of_months)</model>
          <default_column_start>11</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Greatest Date (GREATEST)">
          <function_id>greatest date</function_id>
          <function_expression>GREATEST</function_expression>
          <description>Returns the latest date from a list of dates.\r\nExample: GREATEST(load_sample.date1, load_sample.date2)</description>
          <syntax>GREATEST(date_column, date_column [,date_column]...)</syntax>
          <model>GREATEST(date_column, date_column [,date_column]...)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Earliest Date (LEAST)">
          <function_id>earliest date</function_id>
          <function_expression>LEAST</function_expression>
          <description>Returns the earliest date from a list of dates.\r\nExample: LEAST(load_sample.date1, load_sample.date2)</description>
          <syntax>LEAST(date_column, date_column [,date_column]...)</syntax>
          <model>LEAST(date_column, date_column [,date_column]...)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="Last Day of Month (LAST_DAY)">
          <function_id>last day of month</function_id>
          <function_expression>LAST_DAY</function_expression>
          <description>Returns the date of the last day of the month that the supplied date is in.\r\nExample: LAST_DAY(load_sample.date1)</description>
          <syntax>LAST_DAY(date_column)</syntax>
          <model>LAST_DAY(date_column)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Months Diff. (MONTHS_BETWEEN)">
          <function_id>months diff</function_id>
          <function_expression>MONTHS_BETWEEN</function_expression>
          <description>Returns the number of months or part months between two dates.\r\nExample: MONTHS_BETWEEN(load_sample.date1,load_sample.date2)</description>
          <syntax>MONTHS_BETWEEN(date_column, date_column)</syntax>
          <model>MONTHS_BETWEEN(date_column, date_column)</model>
          <default_column_start>15</default_column_start>
          <default_column_end>26</default_column_end>
        </function>
        <function name="New Time (NEW_TIME)">
          <function_id>new time</function_id>
          <function_expression>NEW_TIME</function_expression>
          <description>Returns the date in the specified time zone.\r\nExample: NEW_TIME(load_sample.date1,'GMT','PST')</description>
          <syntax>NEW_TIME(date_column,'this_time_zone','to_time_zone')</syntax>
          <model>NEW_TIME(date_column,'this_time_zone','to_time_zone')</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Next Day (NEXT_DAY)">
          <function_id>next day</function_id>
          <function_expression>NEXT_DAY</function_expression>
          <description>Returns the date of the next day (i.e. Monday, Tuesday...) after the supplied date.\r\nExample: NEXT_DAY(load_sample.date1,'Sunday')</description>
          <syntax>NEXT_DAY(date_column,'day_of_week')</syntax>
          <model>NEXT_DAY(date_column,'day_of_week')</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Round (ROUND)">
          <function_id>round</function_id>
          <function_expression>ROUND</function_expression>
          <description>ROUND Returns the date rounded to the unit specified by the format model fmt. \r\nIf you omit fmt, then date is rounded to the nearest day. \r\nExample: ROUND (TO_DATE ('27-OCT-00'),'YEAR')</description>
          <syntax>ROUND(date [, fmt ])</syntax>
          <model>ROUND(date_column [, fmt ])</model>
          <default_column_start>6</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="System Date (SYSDATE)">
          <function_id>system date</function_id>
          <function_expression>SYSDATE</function_expression>
          <description>Returns the current system date time.\r\nExample: SYSDATE</description>
          <syntax>SYSDATE</syntax>
          <model>SYSDATE</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="Truncate (TRUNC)">
          <function_id>truncate</function_id>
          <function_expression>TRUNC</function_expression>
          <description>Returns date with the time portion of the day truncated to the unit specified by the format model fmt.\r\nIf you omit fmt, then date is truncated to the nearest day.\r\nExample: TRUNC(load_sample.date1,'YEAR')</description>
          <syntax>TRUNC(date_column [, fmt ])</syntax>
          <model>TRUNC(date_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Conversion">
      <functions>
        <function name="Case Statement (CASE)">
          <function_id>case statement</function_id>
          <function_expression>CASE</function_expression>
          <description>Allows the use of IF ... THEN ... ELSE logic.\r\nExample: CASE WHEN load_sample.temp1 &gt; load_sample_temp2 THEN 'Hot' ELSE 'Cold' END</description>
          <syntax>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</syntax>
          <model>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</model>
          <default_column_start>5</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Decode (DECODE)">
          <function_id>decode</function_id>
          <function_expression>DECODE</function_expression>
          <description>Returns the value that matches the specified criteria.\r\nExample: DECODE(load_sample.temp1,10,'Okay',9,'Cold',11,'Hot,'Unknown')</description>
          <syntax>DECODE(column, criteria,result [,criteria,result...] ,default)</syntax>
          <model>DECODE(column, criteria,result [,criteria,result...] ,default)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>13</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <function_id>if null value</function_id>
          <function_expression>NVL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
          <syntax>NVL(column,default_value)</syntax>
          <model>NVL(column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>10</default_column_end>
        </function>
        <function name="To Character (TO_CHAR)">
          <function_id>to character</function_id>
          <function_expression>TO_CHAR</function_expression>
          <description>Returns a string having converted from either a number or date.\r\nExample: TO_CHAR(load_inventory.date1,'YYYYMMDD')</description>
          <syntax>TO_CHAR(numeric_column or date_column, [format])</syntax>
          <model>TO_CHAR(numeric_column or date_column, [format])</model>
          <default_column_start>8</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="To Date (TO_DATE)">
          <function_id>to date</function_id>
          <function_expression>TO_DATE</function_expression>
          <description>Returns a date having converted from a string with the supplied format mask.\r\nExample: TO_DATE(load_inventory.date_ymd,'YYYYMMDD')</description>
          <syntax>TO_DATE(numeric_column, [format])</syntax>
          <model>TO_DATE(numeric_column, [format])</model>
          <default_column_start>8</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="To Number (TO_NUMBER)">
          <function_id>to number</function_id>
          <function_expression>TO_NUMBER</function_expression>
          <description>Returns a number having converted from a character string.\r\nExample: TO_NUMBER(load_inventory.position)</description>
          <syntax>TO_NUMBER(string_column)</syntax>
          <model>TO_NUMBER(string_column)</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Translate (TRANSLATE)">
          <function_id>translate</function_id>
          <function_expression>TRANSLATE</function_expression>
          <description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
          <syntax>TRANSLATE(string_column, if, then )</syntax>
          <model>TRANSLATE(string_column, if, then )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Aggregate">
      <functions>
        <function name="Average (AVG)">
          <function_id>average</function_id>
          <function_expression>AVG</function_expression>
          <description>Returns the average value for the supplied column.\r\nExample: AVG(load_inventory.temp1)</description>
          <syntax>AVG(numeric_column)</syntax>
          <model>AVG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Count (COUNT)">
          <function_id>count</function_id>
          <function_expression>COUNT</function_expression>
          <description>Returns the count of the number of non-null values for the column.\r\nExample: COUNT(load_inventory.temp1)</description>
          <syntax>COUNT(column)</syntax>
          <model>COUNT(column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Maximum (MAX)">
          <function_id>maximum</function_id>
          <function_expression>MAX</function_expression>
          <description>Returns the maximum value from the supplied column.\r\nExample: MAX(load_inventory.temp1)</description>
          <syntax>MAX(numeric_column)</syntax>
          <model>MAX(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Minimum (MIN)">
          <function_id>minimum</function_id>
          <function_expression>MIN</function_expression>
          <description>Returns the minimum value from the supplied column.\r\nExample: MIN(load_inventory.temp1)</description>
          <syntax>MIN(numeric_column)</syntax>
          <model>MIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Standard Deviation (STDDEV)">
          <function_id>standard deviation</function_id>
          <function_expression>STDDEV</function_expression>
          <description>Returns the standard deviation for the supplied column.\r\nExample: STDDEV(load_inventory.temp1)</description>
          <syntax>STDDEV(numeric_column)</syntax>
          <model>STDDEV(numeric_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Sum (SUM)">
          <function_id>sum</function_id>
          <function_expression>SUM</function_expression>
          <description>Returns the summed values from the supplied column.\r\nExample: SUM(load_inventory.temp1)</description>
          <syntax>SUM(numeric_column)</syntax>
          <model>SUM(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Variance (VARIANCE)">
          <function_id>variance</function_id>
          <function_expression>VARIANCE</function_expression>
          <description>Returns the variance for the supplied column.\r\nExample: VARIANCE(load_inventory.temp1)</description>
          <syntax>VARIANCE(numeric_column)</syntax>
          <model>VARIANCE(numeric_column)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Operator">
      <functions>
        <function name="+">
          <function_id>addition</function_id>
          <function_expression>+</function_expression>
          <description>Inserts the plus operator to allow addition of two numbers.\r\nExample: load_sales.base + load_sales.gst</description>
          <syntax>+</syntax>
          <model>+</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="-">
          <function_id>subtraction</function_id>
          <function_expression>-</function_expression>
          <description>Inserts the minus operator to allow subtraction of two numbers.\r\nExample: load_sales.base - load_sales.gst</description>
          <syntax>-</syntax>
          <model>-</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="/">
          <function_id>division</function_id>
          <function_expression>/</function_expression>
          <description>Inserts the divide operator to allow division of two numbers.\r\nExample: load_sales.base / load_sales.gst</description>
          <syntax>/</syntax>
          <model>/</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="*">
          <function_id>multiplication</function_id>
          <function_expression>*</function_expression>
          <description>Inserts the multiply operator to allow multiplication of two numbers.\r\nExample: load_sales.base * load_sales.gst</description>
          <syntax>*</syntax>
          <model>*</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="||">
          <function_id>concatenation</function_id>
          <function_expression>||</function_expression>
          <description>Inserts the concatenation operator to allow adding of two strings.\r\nExample: load_customer.first_name || '  ' || load_customer.last_name</description>
          <syntax>||</syntax>
          <model>||</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=" ">
          <function_id>whitespace</function_id>
          <function_expression />
          <description>Inserts the space character for clarity or other purposes.</description>
          <syntax />
          <model />
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="(">
          <function_id>open bracket</function_id>
          <function_expression>(</function_expression>
          <description>Inserts the open bracket, used for setting precedence in result evaluation.</description>
          <syntax>(</syntax>
          <model>(</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=")">
          <function_id>close bracket</function_id>
          <function_expression>)</function_expression>
          <description>Inserts the close bracket, used for setting precedence in result evaluation.</description>
          <syntax>)</syntax>
          <model>)</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
      </functions>
    </functional_group>
  </functional_groups>
</database_function_set>
