{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:SqlServer ModelType:* TemplateType:PowerShell (64-bit) Script                 -- #}
{#                                                                                                                                                           -- #}
{# --    (c) WhereScape Inc 2024. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template         -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.          -- #}
{# --                                                                                                                                                        -- #}
{# -- =============================================================================                                                                          -- #}
{# --                                                                                                                                                        -- #}
{# -- DBMS Name          : AzureSQL                                                                                                                          -- #}
{# -- Template Name      : wsl_sqlserver_pscript_load_ssis                                                                                                   -- #}
{# -- RED Version        : 10.3                                                                                                                              -- #}
{# -- Description        : This template creates a AzureSQL script specifically                                                                              -- #}
{# --                      specifically designed for all RED load tables                                                                                     -- #}
{# --                                                                                                                                                        -- #}
{# -- =============================================================================                                                                          -- #}
{# --                                                                                                                                                        -- #}
{# --                                                                                                                                                        -- #}
{#  Notes / History                                                                                                                                          -- #}

#=============================================================================={%- br %}
# DBMS Name        :    AzureSQL {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    10.3.0{%- br %}
# Description      :    SSIS Load {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
{% if (table.loadInfo.sourceSchema) is defined %}
{% if (table.loadInfo.sourceSchema != "") and (table.loadInfo.sourceTables != "") %}
# Source Schema    :    {{table.loadInfo.sourceSchema}}{%- br %}
# Source Table     :    {{table.loadInfo.sourceTables}}{%- br %}
{% endif %}
{% endif %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}


{% fetch table.target %}
{% fetch table.target.connection %}
{% fetch table.loadInfo.sourceConnection %}{% br %}

$debug = Get-ExtendedProperty -PropertyName "AZ_DEBUG_MODE" -TableName ${env:WSL_LOAD_TABLE}{%- br %}

function WriteAudit($message, $type="audit", $statusCode="I") {
    $outputJson = ConvertTo-Json @{message = $message; type = $type; statusCode = $statusCode} -Compress
    if(Test-IsInteractive){
      $logStream.WriteLine($outputJson)
    }
    else {
      [Console]::WriteLine($message)
    }
}

function Test-IsInteractive {
  # determines if the script is being run from RED or a Scheduler
  if ( ${env:WSL_JOB_KEY} -eq '0' -and ${env:WSL_JOB_NAME} -eq 'Develop' ) {
    $true
  }
  else {
    $false
  }
}


function Exit-Script([int]$scrResCode=0, $scrResMsg="Success") {
    if(Test-IsInteractive){
      $scriptExitCode = 0
      if ($scrResCode -eq 2) {
          [Console]::WriteLine(-2)
      } else {
          [Console]::WriteLine(1)
      }
    }

    else{
      $scriptExitCode = $scrResCode
      if ($scrResCode -ne 0) {
        WriteAudit $scrResMsg "audit" "E"
      }
      else {
        WriteAudit $scrResMsg "audit" "S"
      }
    }
    [Console]::WriteLine($scrResMsg)

    if ($debug.ToUpper() -eq 'TRUE') {
      $output
    }
    Exit $scriptExitCode
}

{%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}

{%- set encapsulation = table.loadInfo.ssisOptions.sourceIdentifierEncapsulation -%}
{%- set source_dbtype = table.dbType.name -%}


{% macro source_database_type() %}
{%- if table.loadInfo.sourceConnection is defined -%}
  {%- fetch table.loadInfo.sourceConnection %}
    {%- if table.loadInfo.loadType.name == "Script based load" -%}
    {%- else -%}
    {{table.loadInfo.sourceConnection.dbType.name}}
    {%- endif -%}
{% endif %}
{% endmacro %}


{%- macro getDataType(datatype, source="") %}
  {# -- sqlserver-datatype: ssis-datatype -- #}
  {%- set dataTypeMap_SQLServer = {
    "boolean": "bool",
    "integer": "i8",
    "int": "i4",
    "decimal": "numeric",
    "number": "numeric",
    "numeric": "numeric",
    "float": "r8",
    "real": "r4",
    "timestamp": "bytes",
    "datetime": "dbTimeStamp",
    "date": "dbDate",
    "time": "dbTime2",
    "datetimeoffset": "dbTimeStampoffset",
    "smalldatetime": "dbTimeStamp",
    "varchar": "str",
    "smallint": "i2",
    "bigint": "i8",
    "varbinary": "bytes",
    "nvarchar": "wstr",
    "tinyint": "ui1",
    "bit": "bool",
    "text": "text",
    "ntext": "ntext",
    "char": "str",
    "nchar": "wstr"
    } -%}

  {# -- oracle-datatype: ssis-datatype -- #}
  {%- set dataTypeMap_Oracle = {
    "number": "numeric",
    "integer": "i8",
    "int": "i4",
    "numeric": "numeric",
    "binary_integer": "i4",
    "raw": "bytes",
    "real": "r8",
    "float": "r8",
    "timestamp": "bytes",
    "datetime": "dbTimeStamp",
    "clob": "text",
    "date": "dbDate",
    "varchar": "wstr",
    "varchar2": "str",
    "nvarchar2": "wstr",
    "long": "text",
    "smallint": "i2",
    "nvarchar": "wstr",
    "tinyint": "ui1",
    "bit": "bool",
    "ntext": "ntext",
    "char": "str",
    "nchar": "wstr"
    } -%}

  {% if source == "" -%}
      {%- set source_database_type = source_database_type() | trim  -%}
  {% else %}
      {%- set source_database_type = source | trim  -%}
  {%- endif -%}

  {%- if source_database_type == "Oracle" -%}
    {%- set ssisDataType = "wstr" -%}
    {%- for item in dataTypeMap_Oracle -%}
      {%- if datatype.toString equals item.key  -%}
        {%- set ssisDataType = item.value -%}
      {%- endif -%}
    {%- endfor -%}
    {{ ssisDataType }}
  {%- else -%}
    {%- set ssisDataType = "str" -%}
    {%- for item in dataTypeMap_SQLServer -%}
      {%- if datatype.toString equals item.key  -%}
        {%- set ssisDataType = item.value -%}
      {%- endif -%}
    {%- endfor -%}
    {{ ssisDataType }}
  {%- endif -%}
{%- endmacro -%}


{%- macro getColumnCaseDestination(column_name) %}
{%- set targetConversion = table.loadInfo.ssisOptions.destinationIdentifierCaseConversion.name -%}
{% if targetConversion == "Lower" %}
{{- column_name | lower -}}
{% elseif targetConversion == "Upper" %}
{{- column_name | upper -}}
{% else %}
{{- column_name -}}
{%- endif -%}
{%- endmacro -%}

{%- macro getColumnCaseSource(column_name) %}
{%- set sourceConversion = table.loadInfo.ssisOptions.sourceIdentifierCaseConversion.name -%}
{% if sourceConversion == "Lower" %}
{{- column_name | lower -}}
{% elseif sourceConversion == "Upper" %}
{{- column_name | upper -}}
{% else %}
{{- column_name -}}
{%- endif -%}
{%- endmacro -%}

{% macro InsertInputColumns(indent) %}
  {%- for column in table.columns %}
    {%- set Column = column.name -%}
    {%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}
    {%- set source_database_type = source_database_type() | trim  -%}
    {%- set databaseTypeForMappings = table.dbType.name -%}
{%- br -%}

    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}

{{indent}}    <inputColumn
{{indent}}      refId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input].Columns[{{column.sourceColumn.name}}]"
{{indent}}      cachedcodepage = "1252"
{{indent}}      cachedDataType="{{- getDataType(column.dataType,databaseTypeForMappings) | trim -}}"
{{indent}}      cachedLength="{{ column.dataTypeSize }}"
{{indent}}      cachedName="{{- column.sourceColumn.name -}}"
{{indent}}      externalMetadataColumnId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input].ExternalColumns[{{- column.sourceColumn.name -}}]"
{%- if load_type == "Script based load" or source_database_type == "Oracle" -%}{% br %}
{{indent}}      lineageId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output].Columns[{{- column.sourceColumn.name-}}]" />
{%- elseif source_database_type == "SQL Server" -%}{% br %}
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].Columns[{{- column.sourceColumn.name-}}]" />
{% endif %}
{% endif %}
{%- br -%}
{%- br -%}
  {%- endfor %}
{% endmacro %}





{% macro InsertInputColumnsDataConversion(indent) %}
  {%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}
  {%- for column in table.columns %}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
    {%- set Column = column.name -%}
{%- br -%}
{{indent}}    <inputColumn
{{indent}}      refId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input].Columns[{{- column.sourceColumn.name -}}]"
{{indent}}      cachedDataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 -%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      cachedcodePage = "1252"
{{indent}}      {% endif %}
{{indent}}      cachedLength="{{ column.dataTypeSize }}"
{{indent}}      {%- endif -%}
{{indent}}      cachedName="{{- column.sourceColumn.name -}}"
{%- if load_type == "Script based load" -%}{% br %}
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].Columns[{{- column.sourceColumn.name -}}]" />
{%- else -%}{%- br -%}
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].Columns[{{- column.sourceColumn.name -}}]" />
{%- endif -%}{%- br -%}
{%- br -%}
    {% endif %}
  {%- endfor %}
{% endmacro %}

{% macro InsertOutputPropertyColumnsDataConversion(indent) %}
  {%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}
  {%- for column in table.columns %}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
    {%- set Column = column.name -%}
    {%- set databaseTypeForMappings = table.dbType.name -%}
{%- br -%}
{{indent}}      <outputColumn
{{indent}}        refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output].Columns[{{- column.sourceColumn.name -}}]"
{{indent}}        codePage="1252"
{{indent}}        dataType="{{- getDataType(column.dataType,databaseTypeForMappings) | trim -}}"
{{indent}}        errorOrTruncationOperation="Conversion"
{{indent}}        errorRowDisposition="FailComponent"
{{indent}}        length="{{ column.dataTypeSize }}"
{{indent}}        lineageId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output].Columns[{{- column.sourceColumn.name -}}]"
{{indent}}        name="{{- column.sourceColumn.name -}}"
{{indent}}        truncationRowDisposition="FailComponent">
{{indent}}        <properties>
{{indent}}          <property
{{indent}}            containsID="true"
{{indent}}            dataType="System.Int32"
{{indent}}            description="Specifies the input column used as the source of data for the conversion."
{%- if load_type == "Script based load" -%}{% br %}
{{indent}}            name="SourceInputColumnLineageID">#{Package\Data Flow Task\Source.Outputs[Flat File Source Output].Columns[{{- column.sourceColumn.name -}}]}</property>
{%- else %}{%- br -%}
{{indent}}            name="SourceInputColumnLineageID">#{Package\Data Flow Task\Source.Outputs[OLE DB Source Output].Columns[{{- column.sourceColumn.name -}}]}</property>
{%- endif %} {%- br -%}
{{indent}}          <property
{{indent}}            dataType="System.Boolean"
{{indent}}            description="Indicates whether the column uses the faster, locale-neutral parsing routines."
{{indent}}            name="FastParse">false</property>
{{indent}}        </properties>
{{indent}}      </outputColumn>
{%- br -%}
    {% endif %}
  {%- endfor %}
{% endmacro %}

{% macro InsertOutputPropertyColumnsErrorOutput(indent) %}
{%- br -%}
{{indent}}        <outputColumn
{{indent}}          refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
{{indent}}          dataType="i4"
{{indent}}          lineageId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
{{indent}}          name="ErrorCode"
{{indent}}          specialFlags="1" />
{{indent}}        <outputColumn
{{indent}}          refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
{{indent}}          dataType="i4"
{{indent}}          lineageId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
{{indent}}          name="ErrorColumn"
{{indent}}          specialFlags="2" />
{% endmacro %}


{% macro InputExternalMetadataColumns(indent) %}
  {%- for column in table.columns %}
    {%- set Column = column.name -%}
    {%- set databaseTypeForMappings = table.dbType.name -%}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br -%}
{{indent}}    <externalMetadataColumn
{{indent}}      refId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input].ExternalColumns[{{column.sourceColumn.name}}]"
{{indent}}      codepage = "1252"
{{indent}}      dataType="{{- getDataType(column.dataType,databaseTypeForMappings) | trim -}}"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      name="{{- column.sourceColumn.name -}}" />
{%- br -%}
{% endif %}
  {%- endfor %}
{% endmacro %}


{% macro getSelectStmt(encapsulation) %}
    SELECT {%- br %}
    {%- set sourceConversion = table.loadInfo.ssisOptions.sourceIdentifierCaseConversion.name -%}
    {%- if table.loadInfo.useOverrideSourceColumns %}
    {{table.loadInfo.overrideSourceColumns}}
    {%- else -%}
    {%- for column in table.columns %}
    {%- if not loop.first %}                  , {% else %}                        {% endif %}
    {% if column.transformType.code != "A" and column.transform == ""%}

           {% if sourceConversion == "Upper" %}
             {% if encapsulation == "[]" %}
             [{{- column.sourceColumn.name | upper -}}] AS [{{- column.sourceColumn.name | upper -}}]{%- br -%}
             {% elseif encapsulation == "''" %}
             '{{- column.sourceColumn.name | upper -}}' AS '{{- column.sourceColumn.name | upper -}}'{%- br -%}
             {% elseif encapsulation == '""' %}
             "{{- column.sourceColumn.name | upper -}}" AS "{{- column.sourceColumn.name | upper -}}"{%- br -%}
             {% elseif encapsulation == '``' %}
             `{{- column.sourceColumn.name | upper -}}` AS `{{- column.sourceColumn.name | upper -}}`{%- br -%}
             {% else %}
             {{column.sourceColumn.name|upper }}{%- br -%}
             {% endif %}
           {% elseif sourceConversion == "Lower"%}
             {% if encapsulation == "[]" %}
             [{{- column.sourceColumn.name | lower -}}] as [{{- column.sourceColumn.name | lower -}}]{%- br -%}
             {% elseif encapsulation == "''" %}
             '{{- column.sourceColumn.name | lower -}}' as '{{- column.sourceColumn.name | lower -}}'{%- br -%}
             {% elseif encapsulation == '""' %}
             "{{- column.sourceColumn.name | lower -}}" as "{{- column.sourceColumn.name | lower -}}"{%- br -%}
             {% elseif encapsulation == '``' %}
             `{{- column.sourceColumn.name | lower -}}` as `{{- column.sourceColumn.name | lower -}}`{%- br -%}
             {% else %}
             {{column.sourceColumn.name | lower }} as {{- column.sourceColumn.name | lower -}}{%- br -%}
             {% endif %}
          {% else %}
             {% if encapsulation == "[]" %}
             [{{column.sourceColumn.name }}] AS [{{column.sourceColumn.name}}]{%- br -%}
             {% elseif encapsulation == "''" %}
             '{{column.sourceColumn.name }}' AS '{{column.sourceColumn.name}}'{%- br -%}
             {% elseif encapsulation == '""' %}
             "{{column.sourceColumn.name }}" AS "{{column.sourceColumn.name}}"{%- br -%}
             {% elseif encapsulation == '``' %}
             `{{column.sourceColumn.name }}` AS `{{column.sourceColumn.name}}`{%- br -%}
             {% else %}
             {{column.sourceColumn.name }} AS {{column.sourceColumn.name}}{%- br -%}
             {% endif %}
          {% endif %}

    {% elseif column.transform != "" and column.transformType.code != "A"%}
           {% if sourceConversion == "Upper" %}
             {% if encapsulation == "[]" %}
             {{column.transform}} AS [{{column.name|upper }}]{%- br -%}
             {% elseif encapsulation == "''" %}
             {{column.transform}} AS '{{column.name|upper }}'{%- br -%}
             {% elseif encapsulation == '""' %}
             {{column.transform}} AS "{{column.name|upper }}"{%- br -%}
             {% elseif encapsulation == '``' %}
             {{column.transform}} AS `{{column.name|upper }}`{%- br -%}
             {% else %}
             {{column.transform}} AS {{column.name|upper }}{%- br -%}
             {% endif %}
          {% else %}
             {% if encapsulation == "[]" %}
             {{column.transform}} AS [{{column.name}}]{%- br -%}
             {% elseif encapsulation == "''" %}
             {{column.transform}} AS '{{column.name}}'{%- br -%}
             {% elseif encapsulation == '""' %}
             {{column.transform}} AS "{{column.name}}"{%- br -%}
             {% elseif encapsulation == '``' %}
             {{column.transform}} AS `{{column.name}}`{%- br -%}
             {% else %}
             {{column.transform}} AS {{column.name}}{%- br -%}
             {% endif %}
          {% endif %}
    {% else %}
           {% if sourceConversion == "Upper" and encapsulation == "[]"%}
           NULL AS [{{column.name|upper }}]{%- br -%}
           {% elseif sourceConversion == "Upper" %}
           NULL AS {{column.name|upper }}{%- br -%}
           {% else %}
           NULL AS {{column.name }}{%- br -%}
           {% endif %}
    {% endif %}
    {%- endfor %}
    {% endif %}{%- br -%}
                            {% if sourceConversion == "Upper" and encapsulation == "[]"%}
                            FROM [{{table.loadInfo.sourceSchema|upper }}].[{{ table.loadInfo.sourceTables|upper }}] [{{table.loadInfo.sourceTables|upper }}]{%- br -%}
                            {% elseif sourceConversion == "Upper"%}
                            FROM {{table.loadInfo.sourceSchema|upper }}.{{ table.loadInfo.sourceTables|upper }} {{table.loadInfo.sourceTables|upper }}{%- br -%}
                            {% else %}
                            FROM {{table.loadInfo.sourceSchema}}.{{ table.loadInfo.sourceTables }} {{table.loadInfo.sourceTables }}{%- br -%}
                            {% endif %}
                            {%- from table.loadInfo.whereAndGroupByClauses | lines as whereLine %}
                            {{ whereLine }}{% br %}
                            {%- endfrom %}
{% endmacro %}


{#{% macro getSelectStmt() %}#}
{#SELECT Order_Details.OrderID AS orderid,Order_Details.ProductID AS productid FROM dbo.Order_Details Order_Details {%- br -%}#}
{#{% endmacro %}#}


{% macro InsertOutputColumns(indent) %}
  {%- for column in table.columns %}
    {%- set sTargetColumn = column.name -%}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br %}
{{indent}}    <outputColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].Columns[{{- column.sourceColumn.name -}}]"
{{indent}}      errorOrTruncationOperation="Conversion"
{{indent}}      errorRowDisposition="FailComponent"
{{indent}}      {% if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 %}{%- br -%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      codePage = "1252"
{{indent}}      {% endif %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      {% else %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- endif -%}
{{indent}}      externalMetadataColumnId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].ExternalColumns[{{- column.sourceColumn.name -}}]"
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].Columns[{{- column.sourceColumn.name -}}]"
{{indent}}      name="{{- column.sourceColumn.name -}}"
{{indent}}      truncationRowDisposition="FailComponent" />
{%- br %}
    {%- endif -%}
  {%- endfor %}
{% endmacro %}


{% macro OutputExternalMetadataColumnsFile(indent) %}
    {%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}
  {%- for column in table.columns %}
    {%- set Column = column.name -%}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br %}
{{indent}}    <externalMetadataColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].ExternalColumns[{{- column.sourceColumn.name -}}]"{%- br %}
{{indent}}      {% if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 %}{%- br -%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      codePage = "1252"
{{indent}}      {% endif %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      {% else %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- endif -%}
{{indent}}      name="{{- column.sourceColumn.name -}}"  />
{%- br %}
  {% endif %}
  {%- endfor %}
{% endmacro %}

{% macro OutputExternalMetadataColumns(indent) %}
    {%- set load_type = table.loadInfo.loadType.name | trim  -%}{% br %}
  {%- for column in table.columns %}
    {%- set Column = column.name -%}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br %}
{{indent}}    <externalMetadataColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output].ExternalColumns[{{- column.sourceColumn.name -}}]"{%- br %}
{{indent}}      {% if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 %}{%- br -%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      codePage = "1252"
{{indent}}      {% endif %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      {% else %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- endif -%}
{{indent}}      name="{{- column.sourceColumn.name -}}"  />
{%- br %}
    {%- endif -%}
  {%- endfor %}
{% endmacro %}


{% macro InsertOutputColumnsisErrorOut(indent) %}
  {%- for column in table.columns %}
    {%- set sTargetColumn = column.name -%}
{%- br %}

    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}

{{indent}}    <outputColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[{{column.sourceColumn.name}}]"
{{indent}}      {% if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 %}{%br%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      codePage = "1252"
{{indent}}      {% endif %}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      {% else %}{%br%}
{{indent}}      dataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- endif -%}{%br%}
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[{{column.sourceColumn.name}}]"
{{indent}}      name="{{- column.sourceColumn.name -}}" />
{%- br %}
    {%- endif -%}
  {%- endfor %}
{% endmacro %}

#Macro for including the Conversions in the path when the Source is other than SQL Server
{%- macro getPathsAccordingtotheTarget() -%}
{%- set source_database_type = source_database_type() | trim  -%}

{%- if source_database_type == "SQL Server" -%}
          <path
            refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
            endId="Package\Data Flow Task\Row Count.Inputs[Row Count Input 1]"
            name="OLE DB Source Output"
            startId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output]" />
          <path
            refId="Package\Data Flow Task.Paths[Row Count Output 1]"
            endId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]"
            name="Row Count Output 1"
            startId="Package\Data Flow Task\Row Count.Outputs[Row Count Output 1]" />
{%- br %}
{%- elseif source_database_type == "Oracle" -%}
          <path
            refId="Package\Data Flow Task.Paths[Data Conversion Output]"
            endId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]"
            name="Data Conversion Output"
            startId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output]" />
          <path
            refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
            endId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]"
            name="OLE DB Source Output"
            startId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output]" />
{%- br %}
{%- endif -%}

{% endmacro %}




$dsn = ${env:WSL_META_DSN}
$user = ${env:WSL_META_USER}
$pass = ${env:WSL_META_PWD}


$connectionString = "DSN=$dsn;Uid=$user;Pwd=$pass;"

Add-Type -AssemblyName System.Data

$connection = New-Object System.Data.Odbc.OdbcConnection
$connection.ConnectionString = $connectionString


try { {%- br %}
    $connection.Open()
    $command = $connection.CreateCommand()
    $command.CommandText = "SELECT CASE POSITION('SSISCON' IN dc_connect_string)
    WHEN 0 THEN ''
    ELSE
    SUBSTRING(dc_connect_string, POSITION('SSISCON' IN dc_connect_string) + 13,
    CAST(SUBSTRING(dc_connect_string, POSITION('SSISCON' IN dc_connect_string) + 8, 4) AS INTEGER))
    END AS tgt_connection_details
    FROM red.ws_dbc_connect
    WHERE dc_name = '{{table.target.connection.name}}';"

    $dataAdapter = New-Object System.Data.Odbc.OdbcDataAdapter($command)
    $dataTable = New-Object System.Data.DataTable
    $null = $dataAdapter.Fill($dataTable)
    $null = $dataTable | Format-Table -AutoSize

} catch { {%- br %}
    Write-Host "Error: $($_.Exception.Message)"
} finally { {%- br %}
    $connection.Close()
}


$tgt_connection_string = $dataTable.Rows[0]["tgt_connection_details"]



try { {%- br %}
    $connection.Open()
    $command = $connection.CreateCommand()
    $command.CommandText = "SELECT CASE POSITION('SSISCON' IN dc_connect_string)
    WHEN 0 THEN ''
    ELSE
    SUBSTRING(dc_connect_string, POSITION('SSISCON' IN dc_connect_string) + 13,
    CAST(SUBSTRING(dc_connect_string, POSITION('SSISCON' IN dc_connect_string) + 8, 4) AS INTEGER))
    END AS src_connection_details
    FROM red.ws_dbc_connect
    WHERE dc_name = '{{table.loadInfo.sourceConnection.name}}';"

    $dataAdapter = New-Object System.Data.Odbc.OdbcDataAdapter($command)
    $dataTable = New-Object System.Data.DataTable
    $null = $dataAdapter.Fill($dataTable)
    $null = $dataTable | Format-Table -AutoSize

} catch { {%- br %}
    Write-Host "Error: $($_.Exception.Message)"
} finally { {%- br %}
    $connection.Close()
}

$src_connection_string = $dataTable.Rows[0]["src_connection_details"]{%- br %}

$timestamp = Get-Date -Format "M/d/yyyy h:mm:ss tt"{%- br %}

$versionGUID = [System.Guid]::NewGuid().ToString().ToUpper(){%- br %}


{%- set fastload = table.loadInfo.ssisOptions.enableFastLoad -%}
{%- if fastload == true -%}
{%- set accessmode = 3 -%}
{%- else -%}
{%- set accessmode = 0 -%}
{%- endif -%}


{%- set defaultCodePageDestination = table.loadInfo.ssisOptions.destinationAlwaysUseDefaultCodePage -%}
{%- set defaultCodePageSource = table.loadInfo.ssisOptions.sourceAlwaysUseDefaultCodePage -%}

{%- if table.loadInfo.ssisOptions.sourceCodePage is defined %}
{%- set codePageSource = table.loadInfo.ssisOptions.sourceCodePage -%}
{%- else -%}
{%- set codePageSource = "" -%}
{%- endif -%}

{%- if codePageSource == "" -%}
{%- set codePageSource = "1252" -%}
{%- endif %}


{%- if table.loadInfo.ssisOptions.destinationCodePage is defined %}
{%- set codePageDestination = table.loadInfo.ssisOptions.destinationCodePage-%}
{%- else -%}
{%- set codePageDestination = ""-%}
{%- endif -%}

{%- if codePageDestination == "" -%}
{%- set codePageDestination = "1252" -%}
{%- endif %}


{%- set commitSize = table.loadInfo.ssisOptions.commitInterval-%}
{%- if commitSize == "" -%}
{%- set commitSize = "2147483647" -%}
{%- endif %}

{%- if table.loadInfo.ssisOptions.rowsPerBatch is defined %}
{%- set rowsPerBatch = table.loadInfo.ssisOptions.rowsPerBatch -%}
{%- else %}
{%- set rowsPerBatch = "-1" -%}
{%- endif %}

{%- set source_database_type = source_database_type() | trim  -%}{% br %}


{%- if load_type == "Script based load" -%}{% br %}

$sourceFile = "{{ table.loadInfo.sourceFile.path }}"

$sourceFileName = "{{ table.loadInfo.sourceFile.name }}"

$sourceFilePath = Join-Path -Path $sourceFile -ChildPath $sourceFileName

$sourceFileFieldEnclosure = '{{table.loadInfo.sourceFile.fieldEnclosure}}'

$sourceFileRecordDelimiter = "{{table.loadInfo.sourceFile.recordDelimiter}}"

$sourceFileFieldDelimiter = '{{table.loadInfo.sourceFile.fieldDelimiter}}'

$tableHeaderLine = "{{ table.loadInfo.sourceFile.headerLine }}"

if ($tableHeaderLine -eq "true") {
    $fieldHeading = "True"
} elseif ($tableHeaderLine -eq "false") {
    $fieldHeading = "False"
}


{%- macro getunicodedelimiters(delimiter) %}

  {%- set delimiters = {
    "|": "_x007C_",
    "\r\n": "_x000D__x000A_",
    "\n": "_x000A_",
    "\r": "_x000D_",
    ",": "_x002C_"
    } -%}

  {%- set outdelimiter = "_x007C_" -%}

  {%- for item in delimiters -%}
      {%- if delimiter == item.key -%}
        {%- set outdelimiter = item.value -%}
      {%- endif -%}
  {%- endfor -%}
  {{ outdelimiter }}
{% endmacro %}


#Macro for including the Conversions in the path for Flat File Source
{%- macro getPathsforConversion() -%}
          <path
            refId="Package\Data Flow Task.Paths[Data Conversion Output]"
            endId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]"
            name="Data Conversion Output"
            startId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output]" />
          <path
            refId="Package\Data Flow Task.Paths[Flat File Source Output]"
            endId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]"
            name="Flat File Source Output"
            startId="Package\Data Flow Task\Source.Outputs[Flat File Source Output]" />
{%- br %}
{% endmacro %}
{% br %}


{% macro getdatatypecodeflatfile(datatype) %}
    {%- set codes = {
    "varchar": "129",
    "nvarchar": "130",
    "numeric": "131",
    "datetime": "133",
    "dbtimestamp": "135",
    "int":"3",
    "float":"5"
    } -%}

  {%- for code in codes -%}
      {%- if datatype.toString equals code.key  -%}
        {%- set outputcode = code.value -%}
      {%- endif -%}
  {%- endfor -%}
  {{ outputcode }}
{% endmacro %}
{% br %}

{% macro InsertFlatFileData(indent) %}
  {%- from table.columns as column where (column.name != "dss_record_source" and column.name != "dss_load_date") %}
  {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br -%}
{{indent}}  <DTS:FlatFileColumn
{{indent}}      DTS:ColumnType="Delimited"

{% if loop.last %}
{{indent}}      DTS:ColumnDelimiter="{{ getunicodedelimiters(table.loadInfo.sourceFile.recordDelimiter) }}"
{% else %}
{{indent}}      DTS:ColumnDelimiter="{{ getunicodedelimiters(table.loadInfo.sourceFile.fieldDelimiter) }}"
{% endif %}

{{indent}}      DTS:DataType="{{ getdatatypecodeflatfile(column.dataType) }}"
{% if column.dataType == "date" %}
{{indent}}      DTS:MaximumWidth="10"
{% elseif column.dataType == "numeric" or column.dataType == "decimal" %}
{{indent}}      DTS:DataPrecision="{{ column.dataTypeSize }}"
{{indent}}      DTS:DataScale="{{ column.dataTypeScale }}"
{% endif %}
{% if column.dataType == "varchar" %}
{{indent}}      DTS:MaximumWidth="{{ column.dataTypeSize }}"
{{indent}}      DTS:TextQualified="True"
{% endif %}
{{indent}}      DTS:ObjectName="{{ column.sourceColumn.name }}"
{{indent}}      DTS:DTSID="{AB375E20-03F2-43D2-9D50-1B6FFC928F0E}"
{{indent}}      DTS:CreationName="" />
  {% endif %}
  {% endfrom %}
{% endmacro %}


{% macro InsertInputColumnsDataConversionFile(indent) %}
  {%- for column in table.columns %}
    {%- set Column = column.name -%}
{%- br -%}
{{indent}}    <inputColumn
{{indent}}      refId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input].Columns[{{- column.name -}}]"
{{indent}}      cachedDataType="{{- getDataType(column.dataType) | trim -}}"
{{indent}}      {%- if column.dataTypeSize > 0 and column.dataTypeSize != 2147483647 -%}
{{indent}}      {% set datatype =  getDataType(column.dataType) | trim  %}
{{indent}}      {% if datatype == "wstr" %}
{{indent}}      {% else %}
{{indent}}      codePage = "1252"
{{indent}}      {% endif %}
{{indent}}      cachedLength="{{ column.dataTypeSize }}"
{{indent}}      {%- endif -%}
{{indent}}      cachedName="{{- getColumnCaseSource(Column) -}}"
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].Columns[{{- column.name -}}]" />
{%- br -%}
  {%- endfor %}
{% endmacro %}
{% br %}

{% macro InsertOutputColumnsErrorFile(indent) -%}
{{indent}}    <outputColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
{{indent}}      codePage="1252"
{{indent}}      dataType="text"
{{indent}}      description="Flat File Source Error Output Column"
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
{{indent}}      name="Flat File Source Error Output Column" />
{% endmacro -%}
{% br %}

{% macro InsertOutputColumnsFile(indent) %}
  {%- for column in table.columns %}
    {%- set sTargetColumn = column.name -%}
    {% if column.name != "dss_record_source" and column.name != "dss_load_date" %}
{%- br %}
{{indent}}    <outputColumn
{{indent}}      refId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].Columns[{{column.sourceColumn.name}}]"
{{indent}}      codePage="1252"
{{indent}}      dataType="str"
{{indent}}      errorOrTruncationOperation="Conversion"
{{indent}}      errorRowDisposition="FailComponent"
{{indent}}      externalMetadataColumnId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].ExternalColumns[{{column.sourceColumn.name}}]"
{{indent}}      length="{{ column.dataTypeSize }}"
{{indent}}      lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Output].Columns[{{column.sourceColumn.name}}]"
{{indent}}      name="{{column.sourceColumn.name}}"
{{indent}}      truncationRowDisposition="FailComponent">
{{indent}}      <properties>
{{indent}}        <property
{{indent}}          dataType="System.Boolean"
{{indent}}          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
{{indent}}          name="FastParse">false</property>
{{indent}}        <property
{{indent}}          dataType="System.Boolean"
{{indent}}          description="Indicates whether the data is in binary format."
{{indent}}          name="UseBinaryFormat">false</property>
{{indent}}      </properties>
{{indent}}    </outputColumn>
{%- br %}
  {% endif %}
  {%- endfor %}
{% endmacro %}
{%- br %}



$dtsx = @"
<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="$timestamp"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="${env:computername}"
  DTS:CreatorName="${env:WSL_TGT_SERVER}"
  DTS:DTSID="{B976D833-2D28-4AF5-97BF-560C3759151F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.5"
  DTS:LocaleID="16393"
  DTS:ObjectName="{B976D833-2D28-4AF5-97BF-560C3759151F}"
  DTS:VersionGUID="{$versionGUID}">
  <DTS:Property DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DestConn]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{373DF153-2E82-4D26-81D4-4BE3C9E212B1}"
      DTS:ObjectName="DestConn">
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString='$tgt_connection_string' />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SourceConnectionFlatFile]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{6692252F-C96A-4B7E-8D44-C6DA0535507A}"
      DTS:ObjectName="SourceConnectionFlatFile">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter= "{{- getunicodedelimiters(table.loadInfo.sourceFile.recordDelimiter) -}}"
          DTS:ColumnNamesInFirstDataRow="$fieldHeading"
          DTS:RowDelimiter=""
          DTS:TextQualifier="{{- getunicodedelimiters(table.loadInfo.sourceFile.fieldEnclosure) -}}"
          DTS:CodePage="1252"
          DTS:ConnectionString="$sourceFilePath">
          <DTS:FlatFileColumns>
            {{InsertFlatFileData(indent="                    ")}}
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:DTSID="{4D1BF607-59C7-40C0-B0B4-8FAC6194BFF9}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline version="1">
          <components>
            <component
              refId="Package\Data Flow Task\Data Conversion 0 - 0"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion 0 - 0"
              usesDispositions="true">
              <inputs>
                <input
                    refId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]"
                    name="Data Conversion Input">
                    <inputColumns>
                    {{ InsertInputColumnsDataConversion(indent="                    ") }}
                    </inputColumns>
                    <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                    refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output]"
                    exclusionGroup="1"
                    name="Data Conversion Output"
                    synchronousInputId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]">
                    <outputColumns>
                    {{ InsertOutputPropertyColumnsDataConversion(indent="                    ") }}
                    </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]">
                  <outputColumns>
                  {{ InsertOutputPropertyColumnsErrorOutput(indent="             ") }}
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Destination"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Destination"
              usesDispositions="true"
              validateExternalMetadata="False"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[{{table.schema}}].[{{table.name}}]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">{{codePageDestination}}</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">{{defaultCodePageDestination}}</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">{{accessmode}}</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK </property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">{{commitSize}}</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the number of rows in a batch."
                  name="RowsPerBatch">{{rowsPerBatch}}</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Destination.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DestConn]"
                  connectionManagerRefId="Package.ConnectionManagers[DestConn]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    {{ InsertInputColumns(indent="                    ") }}
                  </inputColumns>
                  <externalMetadataColumns isUsed="True">
                    {{ InputExternalMetadataColumns(indent="                    ") }}
                  </externalMetadataColumns>
                </input>
              </inputs>

              <outputs>
                <output
                  refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>

            <component
              refId="Package\Data Flow Task\Source"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="Flat File Source"
              localeId="2057"
              name="Source"
              usesDispositions="true"
              version="1">

              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Source.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[SourceConnectionFlatFile]"
                  connectionManagerRefId="Package.ConnectionManagers[SourceConnectionFlatFile]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Source.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    {{ InsertOutputColumnsFile(indent="                    ") }}
                  </outputColumns>
                  <externalMetadataColumns isUsed="True">
                    {{ OutputExternalMetadataColumnsFile(indent="                    ") }}
                  </externalMetadataColumns>
                </output>

                <output
                  refId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    {{ InsertOutputColumnsErrorFile(indent="                    ") }}
                        <outputColumn
                          refId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Data Flow Task\Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
             {{ getPathsforConversion() }}
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
</DTS:Executable>
"@


{%- else -%}

$dtsx = @"
<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="$timestamp"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="${env:computername}"
  DTS:CreatorName="${env:WSL_TGT_SERVER}"
  DTS:DTSID="{B976D833-2D28-4AF5-97BF-560C3759151F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.5"
  DTS:LocaleID="16393"
  DTS:ObjectName="{B976D833-2D28-4AF5-97BF-560C3759151F}"
  DTS:VersionGUID="{$versionGUID}">
  <DTS:Property DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DestConn]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{373DF153-2E82-4D26-81D4-4BE3C9E212B1}"
      DTS:ObjectName="DestConn">
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString='$tgt_connection_string' />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SourceConn]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{83885875-F879-4D0C-8765-6D994DE1BBC5}"
      DTS:ObjectName="SourceConn">
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString='$src_connection_string' />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6510D883-305A-4832-92B1-E1186C6B481D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions DTS:LoggingMode="1" />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:DTSID="{4D1BF607-59C7-40C0-B0B4-8FAC6194BFF9}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline version="1">
          <components>
          {%- if source_database_type == "Oracle"-%}{%- br %}
            <component
              refId="Package\Data Flow Task\Data Conversion 0 - 0"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion 0 - 0"
              usesDispositions="true">
              <inputs>
                <input
                    refId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]"
                    name="Data Conversion Input">
                    <inputColumns>
                    {{ InsertInputColumnsDataConversion(indent="                    ") }}
                    </inputColumns>
                    <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                    refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Output]"
                    exclusionGroup="1"
                    name="Data Conversion Output"
                    synchronousInputId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]">
                    <outputColumns>
                    {{ InsertOutputPropertyColumnsDataConversion(indent="                    ") }}
                    </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\Data Conversion 0 - 0.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Data Flow Task\Data Conversion 0 - 0.Inputs[Data Conversion Input]">
                  <outputColumns>
                  {{ InsertOutputPropertyColumnsErrorOutput(indent="             ") }}
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            {%- endif -%}{%- br %}
            <component
              refId="Package\Data Flow Task\Destination"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Destination"
              usesDispositions="true"
              validateExternalMetadata="False"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[{{table.schema}}].[{{table.name}}]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">{{codePageDestination}}</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">{{defaultCodePageDestination}}</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">{{accessmode}}</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK </property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">{{commitSize}}</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the number of rows in a batch."
                  name="RowsPerBatch">{{rowsPerBatch}}</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Destination.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DestConn]"
                  connectionManagerRefId="Package.ConnectionManagers[DestConn]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    {{ InsertInputColumns(indent="                    ") }}
                  </inputColumns>
                  <externalMetadataColumns isUsed="True">
                    {{ InputExternalMetadataColumns(indent="                    ") }}
                  </externalMetadataColumns>
                </input>
              </inputs>

              <outputs>
                <output
                  refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Data Flow Task\Destination.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>

            <component
              refId="Package\Data Flow Task\Row Count"
              componentClassID="Microsoft.RowCount"
              contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
              name="Row Count">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable to hold the row count."
                  name="VariableName">User::RowCount</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Row Count.Inputs[Row Count Input 1]"
                  hasSideEffects="true"
                  name="Row Count Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Row Count.Outputs[Row Count Output 1]"
                  name="Row Count Output 1"
                  synchronousInputId="Package\Data Flow Task\Row Count.Inputs[Row Count Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>

            <component
              refId="Package\Data Flow Task\Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Source"
              usesDispositions="true"
              version="7">

              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">"{{table.loadInfo.sourceSchema}}"."{{table.loadInfo.sourceTables}}"</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">{{- getSelectStmt(encapsulation=table.loadInfo.ssisOptions.sourceIdentifierEncapsulation) | trim -}}</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">{{codePageSource}}</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">{{defaultCodePageSource}}</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>

              <connections>
                <connection
                  refId="Package\Data Flow Task\Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[SourceConn]"
                  connectionManagerRefId="Package.ConnectionManagers[SourceConn]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>

              <outputs>
                <output
                  refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    {{ InsertOutputColumns(indent="                    ") }}
                  </outputColumns>
                  <externalMetadataColumns isUsed="True">
                    {{ OutputExternalMetadataColumns(indent="                    ") }}
                  </externalMetadataColumns>
                </output>

                <output
                  refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    {{ InsertOutputColumnsisErrorOut(indent="                    ") }}
                        <outputColumn
                          refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Data Flow Task\Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
             {{ getPathsAccordingtotheTarget() }}
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
</DTS:Executable>
"@
{%- endif %}



$workdir = ${env:WSL_WORKDIR}
$loadTable = ${env:WSL_LOAD_TABLE}
$sequence = ${env:WSL_SEQUENCE}


$fileName = "$loadTable" + "_" + "$sequence.dtsx"
$dtsxFilePath = Join-Path -Path $workdir -ChildPath $fileName

$dtsx | Out-File -FilePath $dtsxFilePath -Encoding utf8

{% if table.loadInfo.ssisOptions.useRowCountLog %}
$output = & "DTExec" "-F $dtsxFilePath" 2>&1 /REP EWPI{%- br -%}
{% else %}
$output = & "DTExec" "-F $dtsxFilePath" 2>&1{%- br -%}
{%- endif -%}
{%- br -%}
$returnCode = $LASTEXITCODE

{% if table.loadInfo.ssisOptions.useRowCountLog %}
$searchText = 'Description: "Destination" wrote (\d+) rows'

$rowCount = $output | Select-String -Pattern 'Description: "Destination" wrote'

$numberOfRows = [regex]::Match($rowCount, $searchText).Groups[1].Value
$rowCount = " $numberOfRows records loaded"
{%- endif -%}
{%- br -%}

if ($returnCode -eq 0) {
    $scriptResultCode = 0
    $scriptResultMessage = "The package executed successfully.$rowCount"
    Exit-Script $scriptResultCode $scriptResultMessage
} elseif ($returnCode -eq 1) {
    $scriptResultCode = 2
    $scriptResultMessage = "The package failed."
    Exit-Script $scriptResultCode $scriptResultMessage
} elseif ($returnCode -eq 3) {
    $scriptResultCode = 2
    $scriptResultMessage = "The package was canceled by the user."
    Exit-Script $scriptResultCode $scriptResultMessage
} elseif ($returnCode -eq 4) {
    $scriptResultCode = 2
    $scriptResultMessage = "The utility was unable to locate the requested package."
    Exit-Script $scriptResultCode $scriptResultMessage
} elseif ($returnCode -eq 5) {
    $scriptResultCode = 2
    $scriptResultMessage = "The utility was unable to load the requested package."
    Exit-Script $scriptResultCode $scriptResultMessage
} elseif ($returnCode -eq 6) {
    $scriptResultCode = 2
    $scriptResultMessage = "The utility encountered an internal error."
    Exit-Script $scriptResultCode $scriptResultMessage
} else {
    $scriptResultCode = 2
    $scriptResultMessage = "Unknown error occurred."
    Exit-Script $scriptResultCode $scriptResultMessage
}
