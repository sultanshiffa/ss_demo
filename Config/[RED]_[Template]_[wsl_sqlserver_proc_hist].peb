{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:SqlServer ModelType:* TemplateType:Procedure                                               -- #}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}
{# --    Â© WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : AzureSQL                                                                                                                         -- #}
{# -- Template Name      : wsl_sqlserver_proc_hist                                                                                                              -- #}
{# -- Template Version   : 8.4.2.0                                                                                                                          -- #}
{# -- Description        : This template creates a SQL Server procedure                                                                                     -- #}
{# --                      specifically designed for RED history tables                                                                                     -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- PC 31/03/2020     Initial version                                                                                                                     -- #}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------- #}
{% import "wsl_sqlserver_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
--=============================================================================={%br%}
-- DBMS Name        :    {{table.dbType.name}}{%br%}
-- Procedure Name   :    {{settings.procedureName}}{%br%}
-- Template         :    {{settings.template.name}}{%br%}
-- Template Version :    8.4.2.0{%br%}
-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
-- Generated by     :    {{env.productVersion}}{%br%}
-- Generated for    :    {{env.licensedTo}}{%br%}
-- Generated on     :    {{env.currentTimestamp}}{%br%}
-- Author           :    {{env.userName}}{%br%}
--=============================================================================={%br%}
-- Notes / History{%br%}
--{%br%}
  {#- Set things up #}
  {{- addProcedureHeader(false, false)}}
  DECLARE @v_row_count        INTEGER       -- General row count
  ,       @v_status           INTEGER       -- General status field
  ,       @v_getkey_status    INTEGER       -- GetKey procedure status
  ,       @v_current_date     DATETIME      -- Used to set date to midnight
  ,       @v_count            INTEGER       -- General counter
  ,       @v_change_count     INTEGER       -- Used for history start/end dates
  ,       @v_merge_count      INTEGER       -- No of records merged
{%- if settings.processByBatch %}
{%-   from table.columns as col where col.name == settings.batchProcessingField %}
{%br%}  ,       @v_batch_start      {{col.baseDataType | upper }}  -- Used for batch processing start
{%-   endfrom %}
{%- endif -%}
{%- if settings.deleteBeforeInsert and settings.deleteWhereClause | trim != "" %}
{%br%}  ,       @v_delete_count     INTEGER       -- No of records deleted
{%- endif -%}
{#--------------------------------------------------------#}
{#- Handle parameters - declare variables                -#}
{#--------------------------------------------------------#}
{%- for par in settings.parameters %}
{%br%}  ,       @v_{{par}} VARCHAR(4000) -- Parameter value
{%- endfor %}
{#--------------------------------------------------------#}
{#- Handle parameters - get values                       -#}
{#--------------------------------------------------------#}
{%- for par in settings.parameters %}
{%-   if loop.first %}
{%br%}{%br%}  -- Set Parameter Variables
{%br%}  SET    @v_step             = {% counter %}00
{%-   endif %}
{%br%}  SET    @v_{{par}} = [METABASE].WsParameterReadF('{{par}}')
{%- endfor %}
{#--------------------------------------------------------#}
{#- Handle batch processing cursor definition            -#}
{#--------------------------------------------------------#}
{%- if settings.processByBatch %}
{%br%}{%br%}
  --============================================================================
  -- Cursor for Batch processing
  --============================================================================
  DECLARE c_Batch CURSOR LOCAL FAST_FORWARD READ_ONLY
  FOR
  SELECT DISTINCT {{settings.batchProcessingField}} batch_start
{%- if settings.sourceJoinDetails.join | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.join}}
{%- endif %}
{%- if settings.sourceJoinDetails.where | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.where | trim }}
{%- endif %}
{%- if settings.sourceJoinDetails.groupBy | trim != "" %}
{%br%}  {{settings.sourceJoinDetails.groupBy | trim }}
{%- endif %}
{%br%}  ORDER BY batch_start
{%- endif %}
{%br%}
{%br%}
  --============================================================================
  -- Main
  --============================================================================
  BEGIN TRY

  SET    @v_step             = {% counter %}00{%br%}
  SET    @v_insert_count     = 0
  SET    @v_change_count     = 0
  SET    @v_merge_count      = 0
  SET    @v_update_count     = 0
  SET    @v_current_datetime = GETDATE()
  SET    @v_current_date     = CONVERT(DATETIME, CONVERT(VARCHAR, GETDATE(), 112), 112)

  {%- set dssDeleteTimePresent = false -%}
  {%- set dssDeleteFlagPresent = false -%}
  {%- from table.columns as column where column.name == dssDeleteTime -%}
  {% set dssDeleteTimePresent = true %}
  {%- endfrom -%}
  {%- from table.columns as column where column.name == dssDeleteFlag -%}
  {% set dssDeleteFlagPresent = true %}
  {%- endfrom -%}

{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
{%br%}  SET    @v_delete_count     = 0
{%- endif %}
{# -- ----------------------------------------------------- #}
{# -- Handle Delete before insert options                -- #}
{# -- ----------------------------------------------------- #}
{%- if settings.deleteBeforeInsert -%}
{%-   if     settings.deleteBeforeInsertTruncate -%}
{%br%}{%br%}
  --============================================================================
  -- Truncate the table
  --============================================================================
  SET    @v_step             = {% counter %}00{%br%}
  SET    @v_sql              = N'TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]'
  EXEC   @v_return_status    = sp_executesql @v_sql{%br%}
{%-   elseif settings.deleteWhereClause | trim != "" %}
{%br%}{%br%}
  --============================================================================
  -- Delete any records that we will be replacing
  --============================================================================
  SELECT @v_step             = {% counter %}00
{%-     if settings.deleteBeforeInsertMultiPass -%}
{%br%}  ,      @p_status           = 1

  WHILE  @p_status           > 0
  BEGIN
    BEGIN TRANSACTION

    DELETE TOP(50000)
{%-     else -%}
{%br%}{%br%}  BEGIN TRANSACTION
    DELETE
{%-     endif -%}
{%br%}    FROM   [TABLEOWNER].[{{table.name}}]
    {{settings.deleteWhereClause}}
{%br%}{%br%}
    SELECT @v_delete_count   = @v_delete_count + @@ROWCOUNT
{%-     if settings.deleteBeforeInsertMultiPass -%}
{%br%}    ,      @p_status         = @@ROWCOUNT
{%br%}    COMMIT
  END{%br%}
{%-     else -%}
{%br%}  COMMIT{%br%}
{%-     endif -%}
{%-   endif -%}
{%- endif -%}
{%br%}
{# -- ----------------------------------------------------- #}
{# -- settings.insertZeroKeyRecord not reliable - also test #}
{# -- for the presence of an artificial key                 #}
{# -- ----------------------------------------------------- #}
{%- set surrogatekey = false -%}
{%- from table.columns as col where col.artificial -%}
{%-   set surrogatekey = true -%}
{%- endfrom -%}
{%- if settings.insertZeroKeyRecord and surrogatekey -%}
{%br%}
  --============================================================================
  -- Include 0 key row for when lookup to this table is null
  --============================================================================
  SET    @v_step             = {% counter %}00{%br%}
  SET    @v_count            = 0

  SELECT @v_count            = 1
  FROM   [TABLEOWNER].[{{table.name}}]{%br%}
{%-   from table.columns as col where col.artificial %}
  WHERE  {{col.name}} = 0{%br%}{%br%}
{%-   endfrom %}
  IF @v_count = 0
  BEGIN
    SET    @v_step           = {% counter %}00{%br%}
    BEGIN TRANSACTION

{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
    -- Allow explicit value to be inserted into IDENTITY field
    SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] ON
{%- endif -%}
{%- endfrom %}{%br%}
    INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
{{- addSetInsertTargetColumns(indentString = "    ") }}
    )
    VALUES{%br%}
{%-   from table.columns as col %}
{%-     if loop.first %}
    (
{%-     else -%}
{%br%}    ,
{%-     endif -%}
{%-     if     col.artificial %}
    0
{%-     elseif col.createTime %}
GETDATE()
{%-     elseif col.currentFlag %}
'Y'
{%-     elseif col.dssEndDate %}
{{settings.changeDetectionEndCurrent}}
{%-     elseif col.dssLoadDate %}
GETDATE()
{%-     elseif col.dssStartDate %}
{{settings.changeDetectionStartInitial}}
{%-     elseif col.dssVersion %}
1
{%-     elseif col.updateTime %}
GETDATE()
{%-     elseif col.zeroKeyValue != "" %}
{%-     if col.dataType | lower == "char" or col.dataType | lower == "character" or col.dataType | lower == "varchar"  or col.dataType | lower == "nvarchar" or col.dataType | lower == "text" or col.dataType | lower == "string" -%}SUBSTRING('{{col.zeroKeyValue}}',1,{{col.dataTypeSize}})
{%-     else %}{{col.zeroKeyValue}}
  {%- endif %}
{%-  elseif (col.zeroKeyValue == "") and (col.dataType | lower == "int" or col.dataType | lower == "integer" or col.dataType | lower == "numeric" or col.dataType | lower == "bigint") and not (col.artificial or col.createTime or col.currentFlag or col.dssEndDate or col.dssLoadDate or col.dssStartDate or col.dssVersion or  col.updateTime) -%}
NULL
{%- else %}
SUBSTRING('{{col.zeroKeyValue}}', 1, 64)
{%-     endif %}
{%-   endfrom %}
){%br%}

    SELECT @v_row_count = @@ROWCOUNT
{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
    -- Restore default handling of IDENTITY field
    SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] OFF
{%- endif -%}
{%- endfrom %}{%br%}
    COMMIT
  END
{%- endif %}
{# -- ----------------------------------------------------- #}
{# -- Handle batch processing loop                       -- #}
{# -- ----------------------------------------------------- #}
{%- if settings.processByBatch %}
{%br%}{%br%}
  --============================================================================
  -- Loop over batches
  --============================================================================
  OPEN  c_Batch

  FETCH NEXT
  FROM  c_Batch
  INTO  @v_batch_start

  WHILE @@FETCH_STATUS = 0
  BEGIN
    -- Write message to log

    SET @v_msgtext = 'Processing batch : ' + COALESCE(CONVERT(VARCHAR, @v_batch_start), ' ')
{%-   set ind = "  " %}
{%- else %}
{%-   set ind = "" %}
{%- endif %}
{%br%}{%br%}

{% if settings.update %}

{{ind}}  --============================================================================
{{ind}}  -- Update expiring rows
{{ind}}  --============================================================================
{{ind}}  SET    @v_step             = {% counter %}00{%br%}

{{ind}}  UPDATE [TABLEOWNER].[{{table.name}}]
{{ind}}  SET    dss_end_date        = {{settings.changeDetectionEndExpiring}}{%br%}
{%- from table.columns as col where col.currentFlag %}
{{ind}}  ,      {{col.name}}    = 'N'{%br%}
{%- endfrom %}
{%- from table.columns as col where col.updateTime %}
{{ind}}  ,      {{col.name}}     = @v_current_datetime{%br%}
{%- endfrom %}
{%- from table.columns as col where not (col.dss or col.artificial) %}
{%-   if loop.first %}
{# -- ----------------------------------------------------- #}
{# -- Rows from the source                               -- #}
{# -- ----------------------------------------------------- #}
{{ind}}  FROM  (SELECT {%- if table.sourceJoinDetails.distinct %} DISTINCT{%- endif %}
{%-      set spc = " " %}
{%-   else %}
{%br%}{{ind}}         ,
{%-      set spc = "      " %}
{%-   endif %}
{{spc}}{{col.source}} AS {{col.name}}
{%- endfrom %}
{%- if settings.sourceJoinDetails.join | trim != "" %}
{%br%}{{ind}}         {{settings.sourceJoinDetails.join}}
{%- endif %}
{%- if settings.sourceJoinDetails.where | trim != "" %}
{%br%}{{ind}}         {{settings.sourceJoinDetails.where | trim }}
{%- endif %}
{%-   if settings.processByBatch %}
{%-     from table.columns as col where col.name == settings.batchProcessingField %}
{%-       if settings.sourceJoinDetails.where | trim != "" %}
{%br%}{{ind}}         AND
{%-         set spc = "    " %}
{%-       else %}
{%br%}{{ind}}         WHERE
{%-         set spc = "  " %}
{%-       endif %}
{{spc}}{{col.source}} = @v_batch_start
{%-     endfrom %}
{%-   endif %}
{%- if settings.sourceJoinDetails.groupBy | trim != "" %}
{{ind}}         {{settings.sourceJoinDetails.groupBy | trim }}{%br%}
{%- endif %}
{%br%}{{ind}}         EXCEPT
{# -- ----------------------------------------------------- #}
{# -- Current rows from the target                       -- #}
{# -- ----------------------------------------------------- #}
{%- from table.columns as col where not (col.artificial or col.dss) %}
{%-   if loop.first %}
{{ind}}         SELECT
{%-     set spc = " " %}
{%-   else %}
{%br%}{{ind}}         ,
{%-     set spc = "      " %}
{%-   endif %}
{{spc}}{{table.name}}.{{col.name}} AS {{col.name}}
{%- endfrom %}
{%br%}{{ind}}         FROM   [TABLEOWNER].[{{table.name}}]
{%- from table.columns as col where col.currentFlag %}
{%br%}{{ind}}         WHERE  {{table.name}}.{{col.name}} = 'Y') AS changes
{%- endfrom %}
{# -- ----------------------------------------------------- #}
{# -- Join target to changes                             -- #}
{# -- ----------------------------------------------------- #}
{%- from table.columns as col where col.businessKey %}
{%-   if loop.first %}
{%br%}{{ind}}  WHERE
{%-   else %}
{%br%}{{ind}}  AND
{%-   endif %}
  {{table.name}}.{{col.name}} = changes.{{col.name}}
{%- endfrom %}
{%- from table.columns as col where col.currentFlag %}
{%br%}{{ind}}  AND    {{table.name}}.{{col.name}} = 'Y'
{%- endfrom %}
{# -- ----------------------------------------------------- #}
{# -- Compare tracked columns                            -- #}
{# -- ----------------------------------------------------- #}
{%- from table.columns as col where col.slowlyChanging %}
{%-   if loop.first %}
{%br%}{{ind}}  AND  (
{%-     set spc = "" %}
{%-   else %}
{%br%}{{ind}}  OR
{%-     set spc = "    " %}
{%-   endif %}
{{spc}}({{table.name}}.{{col.name}} <>     changes.{{col.name}}
{%-   if col.nullAllowed -%}
{%br%}{{ind}}  OR    ({{table.name}}.{{col.name}} IS     NULL AND changes.{{col.name}} IS NOT NULL)
{{ind}}  OR    ({{table.name}}.{{col.name}} IS NOT NULL AND changes.{{col.name}} IS     NULL)
{%-   endif -%}
)
{%- endfrom -%}
)

{{ind}}  SELECT @v_row_count        = @@ROWCOUNT
{{ind}}  SET    @v_change_count     = @v_row_count

{%br%}{%br%}

  --============================================================================
  -- Update changed rows
  --============================================================================
	SET @v_step = {% counter %}00

  UPDATE [TABLEOWNER].[{{table.name}}] {% if settings.updateHint | trim != "" %}WITH ( {{settings.updateHint}} ){% endif %}{% br %}
  SET     {% from table.columns as col where not ( col.slowlyChanging or col.artificial or col.businessKey or ( col.dss and not col.updateTime ) ) -%}
            {%- if not loop.first %}        , {% endif -%}
            {%- if col.updateTime -%}{{col.name}} = @v_current_datetime{% br %}
            {%- else %}{{col.name}} =  changes.{{col.name}}{% br %}
            {%- endif %}
          {%- endfrom %}
  FROM
  ({% br %}
  {%- set indent = "    " -%}
  {{- indent }}SELECT
  {%- from table.columns as column where not ( column.artificial or column.dss ) %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {{- column.source }} AS {{ column.name }}{%- br -%}
  {%- endfrom %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}{{indent}}{{joinLine}}{%br%}{%- endfor%}
  {%- for whereLine in (table.sourceJoinDetails.where | lines)%}{{indent}}{{whereLine}}{%br%}{%- endfor%}
  {%- if settings.updateChangedRowsOnly %}
    EXCEPT{% br %}
  {{- indent }}SELECT
  {%- from table.columns as column where not ( column.artificial or column.dss ) %}
    {%- if not loop.first %}{{- indent }}     , {% else %} {% endif -%}
    {{- table.name}}.{{column.name }} AS {{ column.name }}{%- br -%}
  {%- endfrom %}
    FROM [TABLEOWNER].[{{table.name}}]
  ) AS changes{% br %}
  {%- from table.columns as column where column.businessKey -%}
    {% if loop.first %}  WHERE {% else %}  AND {% endif -%}
    {{- table.name }}.{{column.name}} = changes.{{column.name}}{% br %}
  {%- endfrom %}
  {%- else -%}
     ) AS changes{% br %}
  {%- from table.columns as column where column.businessKey -%}
    {% if loop.first %}  WHERE {% else %}  AND {% endif -%}
    {{- table.name }}.{{column.name}} = changes.{{column.name}}{% br %}
  {%- endfrom %}
  {%- endif %}
  {% br %}
  SELECT @v_row_count = @@ROWCOUNT

  SET @v_update_count = @v_update_count + @v_row_count

{% endif %}

{% if settings.insert %}

  --============================================================================
  -- Insert new records
  --============================================================================
	SET @v_step = {% counter %}00

  INSERT INTO [TABLEOWNER].[{{table.name}}] {% if settings.insertHint | trim != "" %}WITH ( {{settings.insertHint}} ){% endif %}{% br %}
    {% set artificialKeyName = "" %}
    {%- from table.columns as column where column.businessKey -%}
    {% set artificialKeyName = column.name -%}
    {%- endfrom %}
  ( {% from table.columns as column where not column.artificial -%}
      {%- if not loop.first %}  , {% endif -%}
      {{- column.name }}{% br %}
    {%- endfrom %}
  ){% br %}
	{%- set indent = "  " -%}
  {{- indent }}SELECT {% if table.sourceJoinDetails.distinct %}DISTINCT {% endif -%}
  {%- from table.columns as column where not column.artificial %}
    {%- if not loop.first %}{{- indent }}     , {% endif -%}
    {%- if column.transform | trim != "" -%}
      {%- from column.transform | trim | lines as transLine -%}
        {%- if not loop.first %}{{- indent }}       {% endif -%}
        {{- transLine -}}
        {%- if not loop.last %}{% br %}{% endif -%}
      {%- endfrom %} AS {{ column.name -}}{%- br -%}
    {%- elseif not column.dss -%}
      {{- column.source }} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source != "" ? column.source : "@v_current_datetime" }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{ column.source }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        CASE WHEN vers.{{artificialKeyName}} IS NULL
              THEN CAST('01-JAN-1900' AS datetime)
              ELSE @v_current_date
        END{%- br -%}
      {%- elseif column.dssEndDate -%}
        CAST('31-DEC-2999' AS datetime){%- br -%}
      {%- elseif column.dssVersion -%}
        CASE WHEN vers.{{artificialKeyName}} IS NULL
              THEN 1
              ELSE vers.dss_version + 1
              END{%- br -%}
      {%- elseif column.currentFlag -%}
        'Y'{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}{{indent}}{{joinLine}}{%br%}{%- endfor%}
  {%- for whereLine in (table.sourceJoinDetails.where | lines)%}{{indent}}{{whereLine}}{%br%}{%- endfor%}
  {{- addLeftOuterJoin(indent = "  ") -}}
  {%- if settings.insertNewRowsOnly %}{% br %}
  EXCEPT{% br %}
  {{- indent }}SELECT {# space after select -#}
  {%- from table.columns as column where not column.artificial %}
    {%- if not loop.first %}{{- indent }}     , {% endif -%}
    {%- if not column.dss -%}
      {{- table.name }}.{{ column.name }} AS {{ column.name }}{%- br -%}
    {%- else -%}
      {%- if column.updateTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.createTime -%}
        @v_current_datetime AS {{ column.name }}{%- br -%}
      {%- elseif column.dssLoadDate -%}
        {{ column.source != "" ? table.name + "." + column.name : "@v_current_datetime" }} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssRecordSource -%}
        {{- table.name}}.{{column.name}} AS {{ column.name }}{%- br -%}
      {%- elseif column.dssStartDate -%}
        @v_current_date{%- br -%}
      {%- elseif column.dssEndDate -%}
        CAST('31-DEC-2999' AS datetime){%- br -%}
      {%- elseif column.dssVersion -%}
        dss_version + 1{%- br -%}
      {%- elseif column.currentFlag -%}
        'Y'{%- br -%}
      {%- else -%}
        CAST(NULL AS {{ column.fullDataType }}) AS {{ column.name }}{%- br -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfrom %}
  FROM [TABLEOWNER].[{{table.name}}]{% br %}
  WHERE {{table.name}}.dss_current_flag = 'Y'
  {%- endif %}
  {%- br %}{% br %}
  SELECT @v_row_count = @@ROWCOUNT

  SET @v_insert_count = @v_insert_count + @v_row_count
{% endif %}

{%- if settings.merge %}
{# -- ----------------------------------------------------- #}
{# -- Merge clause settings.merge                        -- #}
{# -- ----------------------------------------------------- #}
{%br%}{%br%}
{%- set dssFlag = false %}
{%- from table.columns as currFlag where currFlag.currentFlag %}
  {%- set dssFlag = true %}
{%- endfrom %}
{{ind}}  --============================================================================
{{ind}}  -- Merge new records
{{ind}}  --============================================================================
{{ind}}  SET    @v_step             = {% counter %}00{%br%}
{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
{{ind}}-- Allow explicit value to be inserted into IDENTITY field
{{ind}}  SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] ON
{%- endif -%}
{%- endfrom %}{%br%}
{{ind}}  MERGE INTO [TABLEOWNER].[{{table.name}}] {% if settings.mergeHint | trim != "" %}WITH ( {{settings.mergeHint}} ){% endif %}{% br %}
{{ind}}  USING ({%br%}
{#-                             -#}
{#- V E R S I O N   1   R O W S -#}
{#-                              #}
  {{ind}}-- NEW BUSINESS KEY VALUES THAT WILL EACH CREATE A VERSION 1 ROW{%br%}
{{ind}}  SELECT {%br%}
{{- add_select_outerquery(indent = ind)}}
{{ind}}  FROM    (  {%br%}
{{- addNewRowSelect ( indent = "    " + ind ) -}}
{{- addFromClause ( indent = "    " + ind ) -}}
{{- addJoinToTarget ( joinType = "LEFT OUTER", indent = "    " + ind ) -}}
{{- addMaxKeyJoin ( indent = "    " + ind ) -}}
{{- addWhereClause ( indent = "    " + ind ) -}}
{%- if table.sourceJoinDetails.where | trim != "" %}{{ind}}    AND {% else %}{{ind}}    WHERE {% endif %}
{%- from table.columns as bk where bk.businessKey -%}
  {%- if not loop.first -%}{{ind}}    AND {% endif -%}
  {{- table.name}}.{{bk.name}} IS NULL{% br %}
{%- endfrom %}
{{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
{{- addGroupByClause ( indent = "    " + ind ) -}}
{#-                                 -#}
{#- N E W   R O W   V E R S I O N S -#}
{#-                                  #}
  {{ind}}UNION ALL{% br %}
  {{ind}}-- NEW VERSIONS OF EXISTING BUSINESS KEY ROWS{%br%}
{{- addVersionedRowSelect ( indent = "    " + ind ) -}}
{{- addFromClause ( indent = "    " + ind ) -}}
{{- addJoinToTarget ( joinType = "INNER", indent = "    " + ind ) -}}
{{- addMaxKeyJoin ( indent = "    " + ind ) -}}
{{- addWhereClause ( indent = "    " + ind ) -}}
{%- if table.sourceJoinDetails.where | trim != "" %}{{ind}}    AND {% else %}{{ind}}    WHERE {% endif %}
{%- from table.columns as currFlag where currFlag.currentFlag %}{{ table.name }}.{{ currFlag.name }} = 'Y'{% br %}{% endfrom %}
{#- WHERE SLOWLY CHANGING ROWS HAVE CHANGED #}
{{- addType2TrackedWhere ( indent = "    " + ind, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) }}
{%- if dssDeleteTimePresent and dssDeleteFlagPresent -%}
  {{ind}}    OR ( {{table.name}}.{{dssDeleteFlag}} = 'Y'{%  br -%}
  {{ind}}      AND {{table.name}}.{{dssDeleteTime}} IS NOT NULL {%  br -%}
  {{ind}}      AND {{table.name}}.dss_version = ( {%-  br -%}
  {{ind}}        SELECT MAX( maxversion.dss_version ) {%-  br -%}
  {{ind}}        FROM [TABLEOWNER].[{{table.name}}] AS maxversion {%-  br -%}
  {{ind}}        {{addWhereJoinToTargetMaxVersion()}} )
  {{ind}}    ){% br %}
{%- endif -%}
{{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
{{- addGroupByClause ( indent = "    " + ind ) }}
{#-                           -#}
{#- E X P I R I N G   R O W S -#}
{#-                            #}
  {{ind}}UNION ALL{% br %}
  {{ind}}-- CURRENT ROWS THAT NEED TO BE EXPIRED{%br%}
{{- addType2ExpiringRowSelect ( indent = "    " + ind ) -}}
{{- addFromClause ( indent = "    " + ind ) -}}
{{- addJoinToTarget ( joinType = "INNER", indent = "    " + ind ) -}}
{{- addWhereClause ( indent = "    " + ind ) -}}
{#- WHERE CURRENT FLAG -#}
{%- if table.sourceJoinDetails.where | trim != "" %}{{ind}}    AND {% else %}{{ind}}    WHERE {% endif -%}
{%- from table.columns as column where column.currentFlag %}{{ table.name }}.{{ column.name }} = 'Y'{% br %}{% endfrom %}
{#- WHERE SLOWLY CHANGING ROWS HAVE CHANGED #}
{{- addType2TrackedWhere ( indent = "    " + ind, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) -}}
{{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
{{- addGroupByClause ( indent = "    " + ind ) }}
{#-                         -#}
{#- C H A N G E D   R O W S -#}
{#-                         -#}
{#- ARE THERE ANY UNTRACKED COLUMNS? -#}
{%- set untracked = false -%}
{%- from table.columns as untrackedCol where not ( untrackedCol.slowlyChanging or untrackedCol.businessKey or untrackedCol.dss or untrackedCol.artificial or untrackedCol.name == dssDeleteTime ) -%}
  {%- if loop.first -%}
    {%- set untracked = true -%}
  {%- endif -%}
{%- endfrom -%}
{%- if untracked %}
  {{ind}}UNION ALL{% br %}
  {{ind}}-- ROWS WHERE ONLY NON_TRACKED FIELDS HAVE CHANGED{%br%}
  {{- addChangedRowSelect ( indent = "    " + ind ) -}}
  {{- addFromClause ( indent = "    " + ind ) -}}
  {{- addJoinToTarget ( joinType = "INNER", indent = "    " + ind ) -}}
  {{- addWhereClause ( indent = "    " + ind ) -}}
  {#- WHERE CURRENT FLAG #}
  {%- if table.sourceJoinDetails.where | trim != "" %}{{ind}}    AND {% else %}{{ind}}    WHERE {% endif -%}
  {%- from table.columns as column where column.currentFlag %}
    {{- table.name }}.{{ column.name }} = 'Y'{% br %}
  {%- endfrom %}
  {#- WHERE SLOWLY CHANGING ROWS HAVE NOT CHANGED #}
  {{- addType2TrackedWhere ( indent = "    " + ind, whereType = "AND", compareOperator = "=", compareType = "AND", nullSupport = settings.nullSupport ) -}}
  {#- WHERE UNTRACKED COLUMNS HAVE CHANGED #}
  {{- addType2UntrackedWhere ( indent = "    " + ind, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) -}}
 {{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
  {{- addGroupByClause ( indent = "    " + ind ) -}}
{%- endif %}
{{ind}}  ) AS derived_table) AS src{%br%}
{{ind}}  {{addMergeJoinCondition(alias = "src", indentString = ind+"  ")}}
{{ind}}  WHEN MATCHED THEN UPDATE{%br%}
{{ind}}  SET{{- addMergeUpdateColumns(alias = "src", indentString = ind+"    ")}}
{{ind}}  WHEN NOT MATCHED THEN INSERT{%br%}
{{ind}}  {{addSetInsertTargetColumns(indentString = ind)}}
{{ind}}  ){%br%}
{{ind}}  VALUES{%br%}
{{ind}}  ({{- addSetInsertColumnsAzureSQL(addArtificialKey = true, alias = "src", indent = ind+"  ", addColumnName = false, ignoreDssColumns = true)}}
{{ind}}  ){%br%}
{{ind}};{%br%}

{{ind}}  SELECT @v_row_count        = @@ROWCOUNT
{{ind}}  SET    @v_merge_count      = @v_merge_count + @v_row_count
{%- from table.columns as col %}{%br%}
{%- if     col.artificial %}{%br%}
{{ind}}-- Restore default handling of IDENTITY field
{{ind}}  SET IDENTITY_INSERT [TABLEOWNER].[{{table.name}}] OFF
{%- endif -%}
{%- endfrom %}{%br%}
{%- endif -%}

{%-   if settings.processByBatch %}
{%br%}    SET    @v_msgtext          = 'Merged : ' + CONVERT(VARCHAR,COALESCE(@v_row_count, 0)) + ' rows'

    -- Get the next row from the cursor

    FETCH NEXT
    FROM  c_Batch
    INTO  @v_batch_start

  END -- While loop end

  -- Close the cursor

  CLOSE      c_Batch
  DEALLOCATE c_Batch
{%-   endif %}
{#- endif #}


  --============================================================================
  -- Final settings
  --============================================================================
  SET    @v_step             = {% counter %}00{%br%}




  -- Work out the return message

  SET    @v_step             = {% counter %}00
{%- if settings.deleteBeforeInsert and settings.warnOnDelete -%}
{%br%}{%br%}
  IF     @v_delete_count     > 0
    SET  @p_status           = -1  -- Return a warning if a delete occured
  ELSE
    SET  @p_status           = 1{%br%}
{%- else -%}
{%br%}  SET    @p_status           = 1
{%- endif -%}

{%- if settings.merge %}
{%br%}  SET    @p_return_msg       = '{{table.name}} updated. ' + CONVERT(VARCHAR, @v_merge_count) + ' records merged. '
{%- elseif settings.insert -%}
{%br%}  SET    @p_return_msg       = '{{table.name}} updated. ' + CONVERT(VARCHAR, @v_insert_count) + ' records inserted. '    + CONVERT(varchar,@v_update_count) + ' records updated. '
{%- endif %}

{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate -%}
 + CONVERT(VARCHAR, @v_delete_count) + ' records deleted.'{%br%}
{%- endif %}

  RETURN 0
  END TRY
  BEGIN CATCH
    SET @p_status            = -2
    SET @p_return_msg        = SUBSTRING('{{table.name}} update FAILED. Step '      +
                                         CONVERT(VARCHAR,ISNULL(@v_step, 0))        +
                                         '. Error Num: '                            +
                                         CONVERT(VARCHAR,ISNULL(ERROR_NUMBER(), 0)) +
                                         '. Error Msg: '                            +
                                         ERROR_MESSAGE(), 1, 255)
  END CATCH
  IF XACT_STATE() <> 0
  BEGIN
     ROLLBACK TRANSACTION
  END
  RETURN 0
