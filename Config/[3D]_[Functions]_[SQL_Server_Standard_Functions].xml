<?xml version="1.0" encoding="UTF-8"?>
<database_function_set xmlns="http://www.wherescape.com/xml/red" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="SQL Server Standard Functions" xsi:schemaLocation="http://www.wherescape.com/xml/red Database%20Function%20Set.xsd">
  <database>SQL Server</database>
  <meta_version>1</meta_version>
  <functional_groups>
    <functional_group name="Number">
      <functions>
        <function name="Absolute Value (ABS)">
          <function_id>absolute value</function_id>
          <function_expression>ABS</function_expression>
          <description>Returns the absolute value of the number. Essentially converts all values to positive.\r\nExample: ABS(load_sales.tax)</description>
          <syntax>ABS(numeric_column)</syntax>
          <model>ABS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Ceiling (CEILING)">
          <function_id>ceiling</function_id>
          <function_expression>CEILING</function_expression>
          <description>Returns the smallest integer or whole number that is greater than or equal to the value supplied\r\nExample: CEILING(load_sales.tax)</description>
          <syntax>CEILING(numeric_column)</syntax>
          <model>CEILING(numeric_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Cosine (COS)">
          <function_id>cosine</function_id>
          <function_expression>COS</function_expression>
          <description>Returns the trigonometric cosine for an angle expressed in radians.\r\nExample: COS(load_sales.value)</description>
          <syntax>COS(numeric_column)</syntax>
          <model>COS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Exponent (EXP)">
          <function_id>exponent</function_id>
          <function_expression>EXP</function_expression>
          <description>Returns e raised to the specified power. e = 2.718281828...\r\nExample: EXP(3)</description>
          <syntax>EXP(numeric_column)</syntax>
          <model>EXP(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Floor (FLOOR)">
          <function_id>floor</function_id>
          <function_expression>FLOOR</function_expression>
          <description>Returns the smallest integer or whole number that is less than or equal to the value supplied.\r\nExample: FLOOR(load_sales.tax)</description>
          <syntax>FLOOR(numeric_column)</syntax>
          <model>FLOOR(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Natural Logarithm (LOG)">
          <function_id>natural logarithm</function_id>
          <function_expression>LOG</function_expression>
          <description>Returns the natural, or base 'e' logarithm of the supplied value.\r\nExample: LOG(10.34)</description>
          <syntax>LOG(numeric_column)</syntax>
          <model>LOG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Base 10 Logarithm (LOG10)">
          <function_id>base 10 logarithm</function_id>
          <function_expression>LOG10</function_expression>
          <description>Returns the base10 logarithm of the supplied value.\r\nExample: LOG10(100)</description>
          <syntax>LOG10(number)</syntax>
          <model>LOG10(number)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="If Null Value (ISNULL)">
          <function_id>if null value</function_id>
          <function_expression>ISNULL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: ISNULL(load_sales.boxes,0).</description>
          <syntax>ISNULL(numeric_column,default_value)</syntax>
          <model>ISNULL(numeric_column,default_value)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Raise to Exponent (POWER)">
          <function_id>raise to exponent</function_id>
          <function_expression>POWER</function_expression>
          <description>Returns the value raise to the exponent.\r\nExample: POWER(3,3) = 27</description>
          <syntax>POWER(numeric_column,exponent)</syntax>
          <model>POWER(numeric_column,exponent)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Round (ROUND)">
          <function_id>round</function_id>
          <function_expression>ROUND</function_expression>
          <description>Returns the value rounded to a given number of digits of precision.\r\nExample: ROUND(12.399,1) = 12.4</description>
          <syntax>ROUND(numeric_column,precision)</syntax>
          <model>ROUND(numeric_column,precision)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Sign (SIGN)">
          <function_id>sign</function_id>
          <function_expression>SIGN</function_expression>
          <description>Returns either 0, 1, or -1 depending on the passed value. Zero if the passed value is zero.\r\nExample: SIGN(load_sales.value)</description>
          <syntax>SIGN(numeric_column)</syntax>
          <model>SIGN(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sine (SIN)">
          <function_id>sine</function_id>
          <function_expression>SIN</function_expression>
          <description>Returns the trigonometric sine for an angle expressed in radians.\r\nExample: SIN(load_sales.value)</description>
          <syntax>SIN(numeric_column)</syntax>
          <model>SIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Square Root (SQRT)">
          <function_id>square root</function_id>
          <function_expression>SQRT</function_expression>
          <description>Returns the square root of the value supplied.\r\nExample: SQRT(load_sales.value)</description>
          <syntax>SQRT(numeric_column)</syntax>
          <model>SQRT(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Tangent (TAN)">
          <function_id>tangent</function_id>
          <function_expression>TAN</function_expression>
          <description>Returns the trigonometric tangent for an angle expressed in radians.\r\nExample: TAN(load_sales.value)</description>
          <syntax>TAN(numeric_column)</syntax>
          <model>TAN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Truncate (ROUND)">
          <function_id>truncate</function_id>
          <function_expression>ROUND</function_expression>
          <description>Returns the value truncated to a given number of digits of precision. Any non-zero value in function will cause a truncation.\r\nExample: ROUND(12.399,1,1) = 12.3</description>
          <syntax>ROUND(numeric_column,precision, function)</syntax>
          <model>ROUND(numeric_column,precision, function)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="String">
      <functions>
        <function name="ASCII value (ASCII)">
          <function_id>ascii value</function_id>
          <function_expression>ASCII</function_expression>
          <description>Returns the ascii value of the first character in the string.\r\nExample: ASCII(load_customer.name)</description>
          <syntax>ASCII(string_column)</syntax>
          <model>ASCII(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Character (CHAR)">
          <function_id>character</function_id>
          <function_expression>CHAR</function_expression>
          <description>Returns a character whose ASCII value is the passed integer.\r\nExample: CHAR(65)</description>
          <syntax>CHAR(integer)</syntax>
          <model>CHAR(integer)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="If Null Value (ISNULL)">
          <function_id>if null value</function_id>
          <function_expression>ISNULL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: ISNULL(load_sales.payment_method,'Cash').</description>
          <syntax>ISNULL(string_column,default_value)</syntax>
          <model>ISNULL(string_column,default_value)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Length (LEN)">
          <function_id>length</function_id>
          <function_expression>LEN</function_expression>
          <description>Returns an integer value containing the number of characters in the string column.\r\nExample: LEN(load_customer.name)</description>
          <syntax>LEN(string_column)</syntax>
          <model>LEN(string_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="Locate (CHARINDEX)">
          <function_id>locate</function_id>
          <function_expression>CHARINDEX</function_expression>
          <description>Returns an integer value containing the starting position of the search string, or zero if the search string is not found..\r\nExample: CHARINDEX('MITH',load_customer.name)\r\nNote: Wildcards may not be used.</description>
          <syntax>CHARINDEX('search_string',string_column [,start position])</syntax>
          <model>CHARINDEX('search_string',string_column [,start position])</model>
          <default_column_start>26</default_column_start>
          <default_column_end>39</default_column_end>
        </function>
        <function name="Locate (PATINDEX)">
          <function_id>locate patindex</function_id>
          <function_expression>PATINDEX</function_expression>
          <description>Returns an integer value containing the starting position of the search string, or zero if the search string is not found.\r\nExample: PATINDEX('%MITH%',load_customer.name)\r\nNote: Wildcards may be used and the string to search for will normally begin and end with the wildcard character %</description>
          <syntax>PATINDEX('search_string',string_column)</syntax>
          <model>PATINDEX('search_string',string_column)</model>
          <default_column_start>25</default_column_start>
          <default_column_end>38</default_column_end>
        </function>
        <function name="Lower (LOWER)">
          <function_id>lower</function_id>
          <function_expression>LOWER</function_expression>
          <description>Returns a string where every character in the passed column data is converted to lower case.\r\nExample: LOWER(load_customer.name)</description>
          <syntax>LOWER(string_column)</syntax>
          <model>LOWER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Left (LEFT)">
          <function_id>left</function_id>
          <function_expression>LEFT</function_expression>
          <description>Returns a string which is the leftmost characters of the passed column.\r\nExample: LEFT(load_customer.name,60)</description>
          <syntax>LEFT(string_column,size)</syntax>
          <model>LEFT(string_column,size)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Left Trim (LTRIM)">
          <function_id>left trim</function_id>
          <function_expression>LTRIM</function_expression>
          <description>Returns a string which is the passed column data where all of the leading white spaces are removed.\r\nExample: LTRIM(load_customer.name)</description>
          <syntax>LTRIM(string_column)</syntax>
          <model>LTRIM(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Replace (REPLACE)">
          <function_id>replace</function_id>
          <function_expression>REPLACE</function_expression>
          <description>Returns a string where all occurrences of the 'if' string are replaced with the 'then string.\r\nIf no 'then' string is supplied all occurrences of the 'if' string are deleted.\r\nExample: REPLACE(load_customer.name,'SMYTH','SMITH')</description>
          <syntax>REPLACE(string_column,if,then)</syntax>
          <model>REPLACE(string_column,if,then)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Replicate (REPLICATE)">
          <function_id>repeat</function_id>
          <function_expression>REPLICATE</function_expression>
          <description>Returns a string a specified number of time.\r\nExample: REPLICATE(load_customer.name,2) or REPLICATE('x',100)</description>
          <syntax>REPLICATE(string_column,count)</syntax>
          <model>REPLICATE(string_column,count)</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Reverse (REVERSE)">
          <function_id>reverse</function_id>
          <function_expression>REVERSE</function_expression>
          <description>Returns a string with the characters in reverse order. (e.g. SMITH becomes HTIMS).\r\nExample: REVERSE(load_customer.name)</description>
          <syntax>REVERSE(string_column)</syntax>
          <model>REVERSE(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Right (RIGHT)">
          <function_id>right</function_id>
          <function_expression>RIGHT</function_expression>
          <description>Returns a string which is the rightmost characters of the passed column.\r\nExample: RIGHT(load_customer.name,60)</description>
          <syntax>RIGHT(string_column,size)</syntax>
          <model>RIGHT(string_column,size)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Right Trim (RTRIM)">
          <function_id>right trim</function_id>
          <function_expression>RTRIM</function_expression>
          <description>Returns a string which is the passed column data where all of the trailing white spaces are removed.\r\nExample: RTRIM(load_customer.name)</description>
          <syntax>RTRIM(string_column)</syntax>
          <model>RTRIM(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sounds Like (SOUNDEX)">
          <function_id>sounds like</function_id>
          <function_expression>SOUNDEX</function_expression>
          <description>Used in a comparison situation. This function returns a sound code that can be used to compare against a second sound code.\r\nExample: CASE WHEN SOUNDEX(load_customer.last_name) = SOUNDEX('smith') THEN 'smith'\r\nELSE load_customer.last_name END</description>
          <syntax>SOUNDEX(string_column)</syntax>
          <model>SOUNDEX(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Space (SPACE)">
          <function_id>space</function_id>
          <function_expression>SPACE</function_expression>
          <description>This function returns a string of spaces of the length specified.\r\nExample: SPACE(10)</description>
          <syntax>SPACE(size)</syntax>
          <model>SPACE(size)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>10</default_column_end>
        </function>
        <function name="Sub String (SUBSTRING)">
          <function_id>sub string</function_id>
          <function_expression>SUBSTRING</function_expression>
          <description>Returns a sub string of the passed column data. The start position and length of the substring are supplied.\r\nExample: SUBSTRING(load_customer.name,CHARINDEX(' ',load_customer.name)+1,10)</description>
          <syntax>SUBSTRING(string_column, start ,count )</syntax>
          <model>SUBSTRING(string_column, start ,count )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Upper (UPPER)">
          <function_id>upper</function_id>
          <function_expression>UPPER</function_expression>
          <description>Returns a string where every character in the passed column data is converted to upper case.\r\nExample: UPPER(load_customer.name)</description>
          <syntax>UPPER(string_column)</syntax>
          <model>UPPER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Date">
      <functions>
        <function name="Add Date parts (DATEADD)">
          <function_id>add date parts</function_id>
          <function_expression>DATEADD</function_expression>
          <description>Returns a date which has a number of date parts added to the supplied date.\r\nDate parts are Year,quarter,Month,dayofyear,Day,Week,Hour,minute,second,millisecond\r\nExample: DATEADD(Day,23,load_customer.start_date)</description>
          <syntax>DATEADD(date_part, count, date_column)</syntax>
          <model>DATEADD(date_part, count, date_column)</model>
          <default_column_start>26</default_column_start>
          <default_column_end>37</default_column_end>
        </function>
        <function name="Date Difference (DATEDIFF)">
          <function_id>date difference</function_id>
          <function_expression>DATEDIFF</function_expression>
          <description>Returns the number of date parts between two dates. Date parts are Year,quarter,Month,dayofyear,Day,Week,Hour,minute,second,millisecond.\r\nExample: DATEDIFF(Day,load_customer.start_date, load_customer.close_date)</description>
          <syntax>DATEDIFF(date_part, start_date, end_date)</syntax>
          <model>DATEDIFF(date_part, start_date, end_date)</model>
          <default_column_start>20</default_column_start>
          <default_column_end>30</default_column_end>
        </function>
        <function name="Date Part, numeric (DATEPART)">
          <function_id>date part, numeric</function_id>
          <function_expression>DATEPART</function_expression>
          <description>Returns the integer value of the date part for the date supplied.\r\nDate parts are year,quarter,month,dayofyear,day,week,weekday,hour,minute,second,millisecond.\r\nExample: DATEPART(month,load_customer.start_date)</description>
          <syntax>DATEPART(date_part,date_column)</syntax>
          <model>DATEPART(date_part,date_column)</model>
          <default_column_start>19</default_column_start>
          <default_column_end>30</default_column_end>
        </function>
        <function name="Date Part, alpha (DATENAME)">
          <function_id>date part, alpha</function_id>
          <function_expression>DATENAME</function_expression>
          <description>Returns the string value of the date part for the date supplied.\r\nDate parts are year,quarter,month,dayofyear,day,week,weekday,hour,minute,second,millisecond.\r\nExample: DATENAME(month,load_customer.start_date)</description>
          <syntax>DATENAME(date_part,date_column)</syntax>
          <model>DATENAME(date_part,date_column)</model>
          <default_column_start>19</default_column_start>
          <default_column_end>30</default_column_end>
        </function>
        <function name="Day (DAY)">
          <function_id>day</function_id>
          <function_expression>DAY</function_expression>
          <description>Returns the numeric day part of a date column.\r\nExample: DAY(load_customer.start_date)</description>
          <syntax>DAY(date_column)</syntax>
          <model>DAY(date_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>15</default_column_end>
        </function>
        <function name="Is it a Date (ISDATE)">
          <function_id>is it a date</function_id>
          <function_expression>ISDATE</function_expression>
          <description>Returns 1 if the passed column is a date, 0 if not.\r\nExample: ISDATE(load_customer.start_date)</description>
          <syntax>ISDATE(date_column)</syntax>
          <model>ISDATE(date_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Month (MONTH)">
          <function_id>month</function_id>
          <function_expression>MONTH</function_expression>
          <description>Returns the numeric month part of a date column.\r\nExample: MONTH(load_customer.start_date)</description>
          <syntax>MONTH(date_column)</syntax>
          <model>MONTH(date_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="System Date (GETDATE)">
          <function_id>system date</function_id>
          <function_expression>GETDATE()</function_expression>
          <description>Returns the current system date time.\r\nExample: GETDATE()</description>
          <syntax>GETDATE()</syntax>
          <model>GETDATE()</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="Year (YEAR)">
          <function_id>year</function_id>
          <function_expression>YEAR</function_expression>
          <description>Returns the numeric year part of a date column.\r\nExample: YEAR(load_customer.start_date)</description>
          <syntax>YEAR(date_column)</syntax>
          <model>YEAR(date_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>16</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Conversion">
      <functions>
        <function name="Case Statement (CASE)">
          <function_id>case statement</function_id>
          <function_expression>CASE</function_expression>
          <description>Allows the use of IF ... THEN ... ELSE logic.\r\nExample: CASE WHEN load_sample.temp1 &gt; load_sample_temp2 THEN 'Hot' ELSE 'Cold' END</description>
          <syntax>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</syntax>
          <model>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</model>
          <default_column_start>6</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Cast as Type (CAST)">
          <function_id>cast as type</function_id>
          <function_expression>CAST</function_expression>
          <description>Returns the column converted to the specified data type and size.\r\nExample: CAST(load_inventory.size AS VARCHAR(20))</description>
          <syntax>CAST(column AS data_type)</syntax>
          <model>CAST(column AS data_type)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>11</default_column_end>
        </function>
        <function name="If Null Value (ISNULL)">
          <function_id>if null value</function_id>
          <function_expression>ISNULL</function_expression>
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: ISNULL(load_sales.boxes,0).</description>
          <syntax>ISNULL(column,default_value)</syntax>
          <model>ISNULL(column,default_value)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>13</default_column_end>
        </function>
        <function name="Convert (CONVERT)">
          <function_id>convert</function_id>
          <function_expression>CONVERT</function_expression>
          <description>Returns the column converted to the specified data type, size and style (in the case of a date).\r\nCommon date styles are: 120 = yyyy-mm-dd hh:mi:ss(24h), 121 as per 120 + milliseconds, 112=yyyymmdd, 110=mm-dd-yyyy, 103=dd/mm/yyyy.\r\nExample: CONVERT( DATE, @order_date, 112)</description>
          <syntax>CONVERT(data_type[(size)],column [,style])</syntax>
          <model>CONVERT(data_type[(size)],column [,style])</model>
          <default_column_start>26</default_column_start>
          <default_column_end>33</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Aggregate">
      <functions>
        <function name="Average (AVG)">
          <function_id>average</function_id>
          <function_expression>AVG</function_expression>
          <description>Returns the average value for the supplied column.\r\nExample: AVG(load_inventory.temp1)</description>
          <syntax>AVG(numeric_column)</syntax>
          <model>AVG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Count (COUNT)">
          <function_id>count</function_id>
          <function_expression>COUNT</function_expression>
          <description>Returns the count of the number of non-null values for the column.\r\nExample: COUNT(load_inventory.temp1)</description>
          <syntax>COUNT(column)</syntax>
          <model>COUNT(column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Maximum (MAX)">
          <function_id>maximum</function_id>
          <function_expression>MAX</function_expression>
          <description>Returns the maximum value from the supplied column.\r\nExample: MAX(load_inventory.temp1)</description>
          <syntax>MAX(numeric_column)</syntax>
          <model>MAX(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Minimum (MIN)">
          <function_id>minimum</function_id>
          <function_expression>MIN</function_expression>
          <description>Returns the minimum value from the supplied column.\r\nExample: MIN(load_inventory.temp1)</description>
          <syntax>MIN(numeric_column)</syntax>
          <model>MIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Standard Deviation (STDDEV)">
          <function_id>standard deviation</function_id>
          <function_expression>STDDEV</function_expression>
          <description>Returns the standard deviation for the supplied column.\r\nExample: STDDEV(load_inventory.temp1)</description>
          <syntax>STDDEV(numeric_column)</syntax>
          <model>STDDEV(numeric_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Sum (SUM)">
          <function_id>sum</function_id>
          <function_expression>SUM</function_expression>
          <description>Returns the summed values from the supplied column.\r\nExample: SUM(load_inventory.temp1)</description>
          <syntax>SUM(numeric_column)</syntax>
          <model>SUM(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Variance (VAR)">
          <function_id>variance</function_id>
          <function_expression>VAR</function_expression>
          <description>Returns the variance for the supplied column.\r\nExample: VARIANCE(load_inventory.temp1)</description>
          <syntax>VARIANCE(numeric_column)</syntax>
          <model>VARIANCE(numeric_column)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Operator">
      <functions>
        <function name="+ (String)">
          <function_id>concatenation</function_id>
          <function_expression>+</function_expression>
          <description>Inserts the concatenation operator to allow adding of two strings.\r\nExample: load_customer.first_name + ' ' +load_customer.last_name</description>
          <syntax>+</syntax>
          <model>+</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="+ (Numeric)">
          <function_id>addition</function_id>
          <function_expression>+</function_expression>
          <description>Inserts the plus operator to allow addition of two numbers.\r\nExample: load_sales.base + load_sales.gst</description>
          <syntax>+</syntax>
          <model>+</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="-">
          <function_id>subtraction</function_id>
          <function_expression>-</function_expression>
          <description>Inserts the minus operator to allow subtraction of two numbers.\r\nExample: load_sales.base - load_sales.gst</description>
          <syntax>-</syntax>
          <model>-</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="/">
          <function_id>division</function_id>
          <function_expression>/</function_expression>
          <description>Inserts the divide operator to allow division of two numbers.\r\nExample: load_sales.base / load_sales.gst</description>
          <syntax>/</syntax>
          <model>/</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="*">
          <function_id>multiplication</function_id>
          <function_expression>*</function_expression>
          <description>Inserts the multiply operator to allow multiplication of two numbers.\r\nExample: load_sales.base * load_sales.gst</description>
          <syntax>*</syntax>
          <model>*</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=" ">
          <function_id>whitespace</function_id>
          <function_expression />
          <description>Inserts the space character for clarity or other purposes.</description>
          <syntax />
          <model />
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="(">
          <function_id>open bracket</function_id>
          <function_expression>(</function_expression>
          <description>Inserts the open bracket, used for setting precedence in result evaluation.</description>
          <syntax>(</syntax>
          <model>(</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=")">
          <function_id>close bracket</function_id>
          <function_expression>)</function_expression>
          <description>Inserts the close bracket, used for setting precedence in result evaluation.</description>
          <syntax>)</syntax>
          <model>)</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
      </functions>
    </functional_group>
  </functional_groups>
</database_function_set>
